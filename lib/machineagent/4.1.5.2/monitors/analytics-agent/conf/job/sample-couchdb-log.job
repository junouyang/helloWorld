#
# Refer to the end of this file to have a look at a sample format of the
# log file that this job is meant to process.
#

# The version of this job configuration file. This should not be changed by the user.
version: 1

# Optional property. Defaults to "false"
#
enabled: false
startAtEnd: false

# Mandatory property.
#
# On Windows, path should be provided as if on Unix environments.
#   Ex: demo/logs
#   Ex: C:/app/logs
#
file:
    path: /var/log/couchdb
    nameGlob: couch.log
#
# Optional property (Except "sourceType").
#
# These fields are in addition to the data that is already present in the
# files being tailed. Each record read from the file will be enriched with
# these fields.
#
fields:
   sourceType: couchdb-log
   nodeName: Node1
   tierName: Tier1
   appName: App1

# Optional property.
#
# Grok is a way to define and use complex, nested regular expressions in an
# easy to read and use format.
#
# A Grok pattern ultimately resolves and compiles into a regular expression.
# The advantage of using Grok is its ability to compose complex patterns from
# simpler pattern definitions, like a "formal grammar".
#
# See https://grokdebug.herokuapp.com/patterns for examples.
#
# The application comes pre-loaded with some well known Grok patterns in
# the form of ".grok" files. They are available under the "conf/grok" directory.
# Custom Grok files can be added to this directory and they will be
# available for use here when the application is restarted.
#
# The Grok patterns here are meant to match a part of the log "message" string.
# If multiple Grok patterns are provided, each one will be applied to the
# "message" string individually.
#
# A Grok pattern is really a regular expression with the option of referencing
# other known Grok patterns by name. Like this "%{JAVACLASS:myClassName}".
# This means that we are looking for a sub-string that looks like a Java Class
# name. Once the pattern is found, the matching sub-string will be extracted
# and stored separately as a first class field, with "myClassName" as the key.
#
# By default, these patterns do not match multiline strings. To look for
# the pattern sub-string across a multiline string, please refer to:
# http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#DOTALL
#
grok:
  patterns:
    - "\\[%{COUCHDB_TIMESTAMP:eventTimestamp} %{WORD:timeZone}\\] \\[%{LOGLEVEL:logLevel}\\] %{GREEDYDATA:logMessage}"

# Optional property.
#
# If records have a timestamp that should be used as "the" eventTimestamp then
# the format can be provided here to ensure that the string gets parsed and
# transformed correctly to UTC time zone.
#
# An attempt will be made to extract the timestamp automatically, failing which
# one will be added at the time the record is read from the file.
#
# UTC time zone is used throughout the system to ensure consistency of
# timestamps across sources from different time zones. This means that all
# timestamps should be converted to UTC time zone.
#
# Three letter timezone ids are not supported as they are ambiguous. For example,
# "CST" could be U.S. "Central Standard Time" or "China Standard Time". In such
# cases the timestamp will be treated as having the local timezone offset.
#
# If the format ends with a "z" or "Z" then the time zone offset is used to
# convert to UTC time. No time zone means local time zone.
#
# A reference list of available patterns can be found here:
# http://www.joda.org/joda-time/key_format.html
#
eventTimestamp:
   pattern: "EEE, dd MMM yyyy HH:mm:ss"


# ####################################
# ###   Start sample file format   ###
# ####################################
#
# [Fri, 23 Jan 2015 05:23:57 GMT] [info] [<0.32.0>] Apache CouchDB has started on http://127.0.0.1:5984/
# [Fri, 23 Jan 2015 08:55:07 GMT] [info] [<0.139.0>] 127.0.0.1 - - GET / 401
# [Fri, 23 Jan 2015 08:55:17 GMT] [info] [<0.139.0>] 127.0.0.1 - - GET / 401
# [Fri, 23 Jan 2015 09:05:05 GMT] [info] [<0.142.0>] 127.0.0.1 - - GET / 401
# [Fri, 23 Jan 2015 09:06:06 GMT] [info] [<0.142.0>] 127.0.0.1 - - GET /favicon.ico 401
# [Fri, 23 Jan 2015 09:06:19 GMT] [info] [<0.142.0>] 127.0.0.1 - - GET /_utils 401
# [Fri, 23 Jan 2015 09:06:54 GMT] [info] [<0.142.0>] 127.0.0.1 - - GET /_utils 401
# [Fri, 23 Jan 2015 09:07:00 GMT] [info] [<0.142.0>] 127.0.0.1 - - GET /_utils 401
# [Fri, 23 Jan 2015 09:07:41 GMT] [info] [<0.142.0>] 127.0.0.1 - - GET /_utils 301
# [Fri, 23 Jan 2015 09:07:41 GMT] [info] [<0.142.0>] 127.0.0.1 - - GET /_utils/ 200
# [Fri, 23 Jan 2015 09:07:42 GMT] [info] [<0.142.0>] 127.0.0.1 - - GET /_utils/style/layout.css?0.11.0 200
# [Fri, 23 Jan 2015 09:07:42 GMT] [info] [<0.129.0>] 127.0.0.1 - - GET /_utils/script/json2.js 200
# [Fri, 23 Jan 2015 09:07:42 GMT] [info] [<0.137.0>] 127.0.0.1 - - GET /_utils/script/sha1.js 200
#
# ##################################
# ###   End sample file format   ###
# ##################################
