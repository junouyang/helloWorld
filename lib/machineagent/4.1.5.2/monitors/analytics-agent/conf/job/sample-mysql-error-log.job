#
# Refer to the end of this file to have a look at a sample format of the
# log file that this job is meant to process.
#

# The version of this job configuration file. This should not be changed by the user.
version: 1

# Optional property. Defaults to "false"
#
enabled: false
startAtEnd: false

# Mandatory property.
#
# On Windows, path should be provided as if on Unix environments.
#   Ex: demo/logs
#   Ex: C:/app/logs
#
file:
    path: /var/log/mysql
    nameGlob: error.log

# Optional property.
#
# If provided, then it means the file being tailed has records that span
# multiple lines.
#
# If not provided then it means that each line read from the file is to
# be treated as a separate record.
#
# To identify the beginning of a record, there are 2 options:
#   1) "startsWith" followed by the first few characters of a line that
#      indicate the beginning of a record.
#   2) "regex" followed by the regular expression that indicates the
#      beginning of a record.
#
multiline:
   regex: "\\d{6}\\s\\d{2}:\\d{2}:\\d{2}.*"

# Optional property (Except "sourceType").
#
# These fields are in addition to the data that is already present in the
# files being tailed. Each record read from the file will be enriched with
# these fields.
#
fields:
   sourceType: mysql-error-log
   nodeName: Node1
   tierName: Tier1
   appName: App1

# Optional property.
#
# Grok is a way to define and use complex, nested regular expressions in an
# easy to read and use format.
#
# A Grok pattern ultimately resolves and compiles into a regular expression.
# The advantage of using Grok is its ability to compose complex patterns from
# simpler pattern definitions, like a "formal grammar".
#
# See https://grokdebug.herokuapp.com/patterns for examples.
#
# The application comes pre-loaded with some well known Grok patterns in
# the form of ".grok" files. They are available under the "conf/grok" directory.
# Custom Grok files can be added to this directory and they will be
# available for use here when the application is restarted.
#
# The Grok pattern here is meant to match a part of the log "message" string.
#
# A Grok pattern is really a regular expression with the option of referencing
# other known Grok patterns by name. Like this "%{JAVACLASS:myClassName}".
# This means that we are looking for a sub-string that looks like a Java Class
# name. Once the pattern is found, the matching sub-string will be extracted
# and stored separately as a first class field, with "myClassName" as the key.
#
# By default, this pattern does not match multiline strings. To look for
# the pattern sub-string across a multiline string, please refer to:
# http://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#DOTALL
#
# This Grok pattern has been configured to pick fields from log messages that
# span across multiple lines (?s). It also has an ad hoc regular expression
# defined to recognize AM/PM. "SPACE" in a multiline Grok pattern will
# automatically recognize newlines and whitespace characters.
#
grok:
  patterns:
    - "%{NUMBER:date} %{TIME:time} %{GREEDYDATA:mysqlErrorLogContent}"

# Optional property.
#
# If records have a timestamp that should be used as "the" eventTimestamp then
# the format can be provided here to ensure that the string gets parsed and
# transformed correctly to UTC time zone.
#
# An attempt will be made to extract the timestamp automatically, failing which
# one will be added at the time the record is read from the file.
#
# UTC time zone is used throughout the system to ensure consistency of
# timestamps across sources from different time zones. This means that all
# timestamps should be converted to UTC time zone.
#
# If the format ends with a "z" or "Z" then the time zone offset is used to
# convert to UTC time. No time zone means local time zone.
#
# A reference list of available patterns can be found here:
# http://www.joda.org/joda-time/key_format.html
#
eventTimestamp:
   pattern: "yyMMdd HH:mm:ss"


# ####################################
# ###   Start sample file format   ###
# ####################################
#
# 150212 12:01:14 [Note] Plugin 'FEDERATED' is disabled.
# 150212 12:01:14 InnoDB: The InnoDB memory heap is disabled
# 150212 12:01:14 InnoDB: Mutexes and rw_locks use GCC atomic builtins
# 150212 12:01:14 InnoDB: Compressed tables use zlib 1.2.3
# 150212 12:01:14 InnoDB: Using Linux native AIO
# 150212 12:01:14 InnoDB: Initializing buffer pool, size = 64.0M
# 150212 12:01:14 InnoDB: Completed initialization of buffer pool
# InnoDB: The first specified data file ./ibdata1 did not exist:
# InnoDB: a new database to be created!
# 150212 12:01:14  InnoDB: Setting file ./ibdata1 size to 10 MB
# InnoDB: Database physically writes the file full: wait...
# 150212 12:01:14  InnoDB: Log file ./ib_logfile0 did not exist: new to be created
# InnoDB: Setting log file ./ib_logfile0 size to 128 MB
# InnoDB: Database physically writes the file full: wait...
# InnoDB: Progress in MB: 100
#
# ##################################
# ###   End sample file format   ###
# ##################################
