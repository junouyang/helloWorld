#!/usr/bin/env bash

##############################################################################
##
##  analytics-agent start/stop script for UN*X
##
##############################################################################

# Add default JVM options here. You can also use JAVA_OPTS and ANALYTICS_AGENT_START_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS=""

SCRIPT="$0"

# SCRIPT may be an arbitrarily deep series of symlinks. Loop until we have the concrete path.
while [ -h "$SCRIPT" ] ; do
  ls=`ls -ld "$SCRIPT"`
  # Drop everything prior to ->
  link=`expr "$ls" : '.*-> \(.*\)$'`
  if expr "$link" : '/.*' > /dev/null; then
    SCRIPT="$link"
  else
    SCRIPT=`dirname "$SCRIPT"`/"$link"
  fi
done

# determine home
HOME=`dirname "$SCRIPT"`/..

# absolute dirs
HOME=`cd $HOME; pwd`
CONF=`cd "$HOME"/conf; pwd`

export APPLICATION_HOME="$HOME"
STARTUP_LOG_FILE="$APPLICATION_HOME/startup.log"
PROPERTIES_FILE="$APPLICATION_HOME/conf/analytics-agent.properties"

#Time to wait for the analytics-agent to startup in seconds.
START_WAIT_TIME=60

CLASSPATH="$APPLICATION_HOME/lib/*"
JAVA_OPTS=$JAVA_OPTS

APP_NAME="analytics-agent"
APP_BASE_NAME=`basename "$0"`

DEFAULT_MAX_HEAP_SIZE=1g
DEFAULT_MIN_HEAP_SIZE=1g

usage() {
cat << EOF
Usage:
    Start the analytics-agent
        $0 start

    Stop the analytics-agent
        $0 stop

    Other settings:
        To configure additional behavior use JAVA_OPTS: export JAVA_OPTS="-Xmx2g -Xms2g".
        Edit $APPLICATION_HOME/conf/analytics-agent.vmoptions file to fine tune the JVM GC options.

EOF
}

isJavaOptionNotSet() {
    local retVal=0;
    for option in $JAVA_OPTS ; do
        if [[ $option == $1 ]]  ; then
            retVal=1;
            break;
        fi
    done
    return $retVal;
}

setHeapOptionsIfNotset() {
    isXmxSet=true
    isXmsSet=true

    if isJavaOptionNotSet "-Xmx*"; then
        isXmxSet=false
    fi

    if isJavaOptionNotSet "-Xms*"; then
        isXmsSet=false
    fi

    # If user specifies either one of the heap settings do not set any default values for heap sizes.
    if [[ "$isXmxSet" = true ]] || [[ "$isXmsSet" = true ]]; then
        echo JVM heap options are set in JAVA_OPTS. Default heap options will not be added
        return;
    fi

    JAVA_OPTS="$JAVA_OPTS -Xmx$DEFAULT_MAX_HEAP_SIZE"
    JAVA_OPTS="$JAVA_OPTS -Xms$DEFAULT_MIN_HEAP_SIZE"
}

setJavaOpts() {
    isXmsOptionSetInFile=false
    isXmxOptionSetInFile=false
    setHeapOptionsIfNotset

    local vmOptions=""

    while read option
    do
        if [[ $option =~ ^-Xms.* ]]; then
            isXmsOptionSetInFile=true;
        fi
        if [[ $option =~ ^-Xmx.* ]]; then
            isXmxOptionSetInFile=true;
        fi
        vmOptions="$vmOptions $option"
    done < "$APPLICATION_HOME/conf/analytics-agent.vmoptions"

    JAVA_OPTS="$JAVA_OPTS $vmOptions"
}

killPidWithinTimeLimit() {
    kill -CONT $1 #in case someone has called a kill -STOP on the process.
    kill $1
    wait_limit_for_kill=60
    counter=0
    kill_with_no_catch=false

    # wait for the PID to exit
    while kill -0 "$1" >/dev/null 2>&1; do
        echo -n "."
        sleep 1
        ((counter++))

        if [[ $counter -ge $wait_limit_for_kill ]]; then
            echo "Taking too long to kill the process. Killing using -9"
            kill_with_no_catch=true
            break
        fi

    done

    if [[ "$kill_with_no_catch" == "true" ]]; then
        kill -9 $1
        counter=0 #reset the counter
        while kill -0 "$1" >/dev/null 2>&1; do
            echo -n "."
            sleep 1
            ((counter++))

            if [[ $counter -ge $wait_limit_for_kill ]]; then
                echo "CANNOT KILL THE PROCESS WITHIN THE GIVEN TIME LIMIT !!!"
                echo "Aborting the program without successfully killing the agent."
                exit 1
            fi

        done
    fi
    echo "STOPPED";
}

# stops a running agent
# $1 : pid file
stop_agent() {
    if [[ -s "$1" ]] ; then
        while read PID
        do
            echo -n "Stopping process with id [$1] "
            killPidWithinTimeLimit $PID

        done < "$1"
        rm -rf "$1"
    else
        echo "The events service is not running."
	echo
    fi
}

# function that checks if a jvm (processor instance) is listening on a supplied port
# $1 : path to pid file
agent_running() {
    if [ -s "$1" ]; then
        return 0;
    else
        return 1;
    fi
}

# waits for the processor to start responding on the supplied port
# $1 : num seconds to wait
# $2 : path to pid file
wait_for_agent_startup() {
    local counter=0;
    local wait_limit=$1;
    while ! agent_running "$2"; do
        echo -n ".";
        sleep 1;
        ((counter++));
        if [[ $counter -ge $wait_limit ]]; then
            return 1;
        fi
    done
    return 0;
}

# finds the process name set in the properties file
find_process_name() {
    if [[ -n "$PROPERTIES_FILE" ]]; then
        PROCESS_NAME=$(grep ^ad.process.name "$PROPERTIES_FILE" |  awk -F= '{print $2}')
    fi
    echo $PROCESS_NAME
}

remove_stale_pid_files() {
    PID_FILE="$APPLICATION_HOME/`find_process_name`.id"
    if [ -s "$PID_FILE" ]; then
        echo "$PID_FILE already exists. Checking if any process associated with it is running."
        while read PID
            do
                echo "Checking for process with pid $PID"
                if ps -p $PID > /dev/null
                    then
                        echo "Cannot launch another process with the same ID. Exiting now."
                        exit 1
                    else
                        echo "No process seems to be running with pid $PID which is stored in $PID_FILE."
                        echo "Removing the stale pid file."
                        rm -rf "$PID_FILE"

                fi
            done < "$PID_FILE"
    fi
}

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn() {
    echo "$*"
}

die() {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
esac

# For Cygwin, ensure paths are in UNIX format before anything is touched.
if $cygwin ; then
    [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APPLICATION_HOME/media/gradle.icns\""
fi

# For Cygwin, switch paths to Windows format before running java
if $cygwin ; then
    APPLICATION_HOME=`cygpath --path --mixed "$APPLICATION_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=$((i+1))
    done
    case $i in
        (0) set -- ;;
        (1) set -- "$args0" ;;
        (2) set -- "$args0" "$args1" ;;
        (3) set -- "$args0" "$args1" "$args2" ;;
        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Split up the JVM_OPTS And ANALYTICS_AGENT_START_OPTS values into an array, following the shell quoting and substitution rules
function splitJvmOpts() {
    JVM_OPTS=("$@")
}

if [ "$#" -gt 1 ]; then
    echo $2 is not expected here.
    usage
    exit 1
fi

# depending on parameter -- start, stop
# of the instance and listener or usage display
case "$1" in
    start)
        shift
        setJavaOpts
        # If the heap settings, either Xms or Xmx have been specified both in command line through JAVA_OPTS and also
        # vmoptions file, print an error message about the conflicting settings and exit
        if [ "$isXmsOptionSetInFile" == "true" ] && [ "$isXmsSet" == "true" ]; then
            die "Conflicting -Xms heap settings found in JAVA_OPTS and analytics-agent.vmoptions file.
                 Please remove the -Xms heap settings specified in $APPLICATION_HOME/conf/analytics-agent.vmoptions"
        fi
        if [ "$isXmxOptionSetInFile" == "true" ] && [ "$isXmxSet" == "true" ]; then
            die "Conflicting -Xmx heap settings found in JAVA_OPTS and analytics-agent.vmoptions file.
                 Please remove the -Xmx heap settings specified in $APPLICATION_HOME/conf/analytics-agent.vmoptions"
        fi
        eval splitJvmOpts $JAVA_OPTS
        PROCESS_NAME=`find_process_name`
        APP_PID_FILE="$APPLICATION_HOME/$PROCESS_NAME.id"

        echo Starting analytics-agent with arguments "${JVM_OPTS[@]}" and using the properties file $PROPERTIES_FILE.
        echo Startup errors if any will be written to $STARTUP_LOG_FILE

        #check and remove stale pid files if present
        remove_stale_pid_files
        nohup "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$APPLICATION_HOME/lib/*" com.appdynamics.analytics.agent.AnalyticsAgent "$PROPERTIES_FILE" > "$STARTUP_LOG_FILE" 2>&1 &

        echo -n "Waiting for port $HTTP_PORT: "
        echo "Will wait for $START_WAIT_TIME seconds for the agent to startup."
        echo "To increase the value please edit START_WAIT_TIME variable in $0"
        if wait_for_agent_startup $START_WAIT_TIME "$APP_PID_FILE"
        then
            echo "STARTED"
        else
            echo "Failed to start the agent within the time limit of
            $START_WAIT_TIME sec. Please check $STARTUP_LOG_FILE"
            echo "Killing the agent."
            stop_agent "$APP_PID_FILE"
            exit 1
        fi
        exit 0
        ;;
    stop)
        shift
        if [[ -n "$@" ]]; then
            for pid_file in "$@"; do
                if [ -s "$pid_file" ]; then
                    stop_agent "$pid_file"
                else
                    echo "Unable to find [$pid_file]"
                    echo "Either the process is not running or [$pid_file] has been moved/deleted"
                    echo "Please kill the process associated with [$pid_file] manually if it is running"
                fi
            done
        else
            echo "No arguments are passed to the stop command"
            echo "Stopping all the processes currently launched from $APPLICATION_HOME"
            find "$APPLICATION_HOME/" -type f -name "*.id" | while read pid_file; do
                stop_agent "$pid_file"
            done
        fi
        exit 0
        ;;
    *)
        usage
        exit 1
esac
exit 0
