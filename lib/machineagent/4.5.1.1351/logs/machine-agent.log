[main] 03 Aug 2018 09:36:41,504  WARN FrameworkBootstrap - Failed to start framework
com.google.inject.CreationException: Unable to create injector, see the following errors:

1) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

2) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

3) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

4) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

5) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

6) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

7) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

8) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

9) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

10) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

11) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

12) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

13) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

14) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

15) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

16) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

17) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

18) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

19) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

20) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

21) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

22) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

23) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

24) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

25) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

26) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

27) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

28) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

29) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

30) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

31) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

32) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

33) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

34) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

35) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

36) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

37) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

38) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

39) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

40) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

41) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

42) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

43) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

44) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

45) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

46) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

47) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

48) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

49) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

50) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

50 errors
	at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:466)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:176)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)
[main] 03 Aug 2018 09:37:02,233  WARN FrameworkBootstrap - Failed to start framework
com.google.inject.CreationException: Unable to create injector, see the following errors:

1) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

2) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

3) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

4) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

5) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

6) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

7) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

8) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

9) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

10) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

11) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

12) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

13) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

14) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

15) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

16) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

17) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

18) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

19) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

20) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

21) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

22) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

23) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

24) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

25) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

26) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

27) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

28) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

29) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

30) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

31) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

32) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

33) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

34) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

35) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

36) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

37) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

38) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

39) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

40) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

41) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

42) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerUrlProvider.<init>(ControllerUrlProvider.java:24)
  while locating com.appdynamics.agent.sim.client.ControllerUrlProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:110) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.String annotated with @com.appdynamics.voltron.rest.client.RestClientBaseUrl()
    for parameter 0 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

43) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

44) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthCache(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.AuthCache annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

45) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

46) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerAuthInfoProvider.<init>(ControllerAuthInfoProvider.java:27)
  while locating com.appdynamics.agent.sim.client.ControllerAuthInfoProvider
  while locating com.appdynamics.voltron.rest.client.impl.apache.AuthInfo annotated with @com.google.inject.multibindings.Element(setName=@com.appdynamics.voltron.utils.annotations.Delegate,uniqueId=6, type=MULTIBINDER, keyType=)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:79) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule -> com.google.inject.multibindings.Multibinder$RealMultibinder)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo> annotated with @com.appdynamics.voltron.utils.annotations.Delegate()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideAuthInfoSet(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating java.util.Set<com.appdynamics.voltron.rest.client.impl.apache.AuthInfo>
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideCredentialsProvider(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.CredentialsProvider annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.provideHttpClient(ApacheClientModule.java:70) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.impl.client.CloseableHttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 0 at com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient.<init>(ManagedHttpClient.java:33)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ManagedHttpClient
  at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientModule.configure(ApacheClientModule.java:81) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule -> com.appdynamics.agent.sim.client.ControllerClientImplModule)
  while locating org.apache.http.client.HttpClient annotated with @com.appdynamics.voltron.rest.client.impl.apache.ApacheFeignClient()
    for parameter 1 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:375)
	at com.google.inject.multibindings.Multibinder$RealMultibinder.get(Multibinder.java:258)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

47) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

48) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38)
  at com.appdynamics.agent.sim.client.ControllerClientBuilderModule.provideGzipEnabled(ControllerClientBuilderModule.java:38) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating java.lang.Boolean annotated with interface com.appdynamics.agent.sim.client.ControllerClientBuilderModule$ControllerClientGzipEnabled
  while locating java.lang.Boolean annotated with @com.appdynamics.voltron.rest.client.VoltronFeignGzip()
    for parameter 2 at com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl.<init>(ApacheClientImpl.java:49)
  while locating com.appdynamics.voltron.rest.client.impl.apache.ApacheClientImpl
  while locating feign.Client annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 4 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.InjectorImpl$2$1.call(InjectorImpl.java:1016)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.InjectorImpl$2.get(InjectorImpl.java:1012)
	at com.google.inject.spi.ProviderLookup$1.get(ProviderLookup.java:104)
	at com.google.inject.internal.ProviderMethod.get(ProviderMethod.java:167)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.provision(InternalFactoryToInitializableAdapter.java:53)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.InternalFactoryToInitializableAdapter.get(InternalFactoryToInitializableAdapter.java:45)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

49) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

50) Bootstrap configuration failed to validate.
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:55)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration annotated with @com.appdynamics.voltron.utils.annotations.Raw()
    for parameter 0 at com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider.<init>(EncryptionWrapperProvider.java:40)
  while locating com.appdynamics.agent.sim.encryption.EncryptionWrapperProvider
  at com.appdynamics.agent.sim.encryption.EncryptionModule.configure(EncryptionModule.java:30)
  while locating com.google.common.base.Optional<com.singularity.ee.util.security.credentialstore.KeyStoreBasedEncryptionWrapper>
    for parameter 1 at com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration.<init>(ClearTextBootstrapConfiguration.java:51)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.ClearTextBootstrapConfiguration
  at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationModule.configure(BootstrapConfigurationModule.java:60)
  while locating com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfiguration
    for parameter 0 at com.appdynamics.agent.sim.client.ControllerRetryer.<init>(ControllerRetryer.java:22)
  while locating com.appdynamics.agent.sim.client.ControllerRetryer
  while locating feign.Retryer annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 5 at com.appdynamics.voltron.rest.client.FeignBuilderProvider.<init>(FeignBuilderProvider.java:51)
  while locating com.appdynamics.voltron.rest.client.FeignBuilderProvider
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:112) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating feign.Feign$Builder annotated with @com.appdynamics.voltron.rest.client.VoltronFeign()
    for parameter 1 at com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory.<init>(DefaultFeignServiceFactory.java:26)
  while locating com.appdynamics.voltron.rest.client.DefaultFeignServiceFactory
  at com.appdynamics.voltron.rest.client.FeignClientBuilderModule.configure(FeignClientBuilderModule.java:123) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientBuilderModule)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory annotated with @com.google.inject.name.Named(value=ControllerClient)
  while locating com.appdynamics.voltron.rest.client.FeignServiceFactory
    for parameter 0 at com.appdynamics.voltron.rest.client.RestClientProvider.setServiceFactory(RestClientProvider.java:35)
  at com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService.configure(FeignClientServicesModule.java:176) (via modules: com.appdynamics.agent.sim.client.ControllerClientModule -> com.appdynamics.agent.sim.client.ControllerClientServicesModule -> com.appdynamics.voltron.rest.client.FeignClientServicesModule$ClientService)
Caused by: javax.validation.ConstraintViolationException: Error occurred while validating bootstrap configuration data:
<?xml version="1.0" encoding="UTF-8"?>
<controller-info>
    <!-- For more detailed information on different configurations that an agent can support and the respective rules,
    consult the online documentation. In general, configuration properties may be set in different ways. Here is the
    order of precedence of how the agent will read and respect specific configurations.
      1. Environment Variables
      2. System Properties
      3. Default/Root controller-info.xml. See .../$(Agent-Base-Install-Dir)/conf/controller-info.xml -->

    <!-- This is the host name or the IP address of the AppDynamics Controller (e.g., 192.168.1.22 or myhost or
    myhost.abc.com). This is the same host that you use to access the AppDynamics browser-based User interface. This can
    be overridden with the environment variable 'CONTROLLER_HOST_NAME' or the system property
    '-Dappdynamics.controller.hostName' -->
    <controller-host>localhost</controller-host>

    <!-- This is the http(s) port of the AppDynamics Controller. If 'controller-ssl-enabled' (below) is set to true, you
    must specify the HTTPS port of the Controller; otherwise, specify the HTTP port. The default values are 8090 for
    HTTP and 8181 for HTTPS. This is the same port that you use to access the AppDynamics browser-based User interface.
    This can be overridden with the environment variable 'APPDYNAMICS_CONTROLLER_PORT' or the system property
    '-Dappdynamics.controller.port' -->
    <controller-port>8080</controller-port>

    <!-- This specifies if the AppDynamics agent should use SSL (HTTPS) to connect to the Controller. If you set this to
    true, the controller port property above should be set to the HTTPS port of the Controller. This can be overridden
    with the environment variable 'APPDYNAMICS_CONTROLLER_SSL_ENABLED' or the system property
    '-Dappdynamics.controller.ssl.enabled' -->
    <controller-ssl-enabled>false</controller-ssl-enabled>

    <!-- Set this flag to 'true' to enable features required for AppDynamics Orchestration, including the following:
    1) Enables the agent to execute tasks specified in AppDynamics Orchestration workflows.
    2) Enables the agent to resolve the AppDynamics Controller host and port when the host machine where this agent
       resides is created through AppDynamics Orchestration. -->
    <enable-orchestration>false</enable-orchestration>

    <!-- The Machine Agent uses the Java API to get the host name of the agent. The results from the API can be
    inconsistent, and the same JVM can sometimes return a different value for the same machine each time the machine
    agent is restarted. It is recommended to set this field in the following scenarios:

    1) The machine host name is not constant
    2) You prefer to use a specific name in the UI
    3) The machine has both a machine agent and app agents on it.

    This can be overridden with the environment variable 'APPDYNAMICS_AGENT_UNIQUE_HOST_ID' or the system property
    '-Dappdynamics.agent.uniqueHostId' -->
    <unique-host-id></unique-host-id>

    <!-- This key is generated at installation time and can be found by viewing the license information in the
    controller settings. This can be overridden with the environment variable 'APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY' or
    the system property '-Dappdynamics.agent.accountAccessKey' -->
    <account-access-key></account-access-key>

    <!-- If the AppDynamics Controller is running in multi-tenant mode or you are using the AppDynamics SaaS Controller,
    you must specify the account name for this agent to authenticate with the controller. If you are running in
    single-tenant mode (the default) there is no need to configure this value. This can be overridden with the
    environment variable 'APPDYNAMICS_AGENT_ACCOUNT_NAME' or the system property '-Dappdynamics.agent.accountName' -->
    <account-name></account-name>

    <!-- If this agent is licensed for Server Monitoring, set this flag to 'true' to enable Server Monitoring expanded
    metrics. This can be overridden with the environment variable 'APPDYNAMICS_SIM_ENABLED' or the system property
    '-Dappdynamics.sim.enabled' -->
    <sim-enabled>false</sim-enabled>

    <!-- This value is used to create the hierarchy infrastructure view in the UI for this machine. Each hierarchy level
    should be separated with a vertical bar ("|"). For example, if this machine belongs to "DataRack1" and it is located
    in "Virginia Data Center", then the machine path could be set to "Virginia Data Center|DataRack1|Machine1" and the
    UI will display it in that hierarchy ("Virginia Data Center|DataRack1"). The last element of the path indicates the
    server name (e.g., "Machine1") and appears as the name on the servers list in the UI. This can be overridden with
    the environment variable 'APPDYNAMICS_MACHINE_HIERARCHY_PATH' or the system property
    '-Dappdynamics.machine.agent.hierarchyPath'.

    Note: The number of characters up to but not including the last vertical bar must not exceed 95. -->
    <machine-path></machine-path>

</controller-info>

    property 'accountAccessKey': may not be empty Found value 'null'.

	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:76)
	at com.appdynamics.agent.sim.configuration.bootstrap.BootstrapConfigurationProvider.get(BootstrapConfigurationProvider.java:34)
	at com.google.inject.internal.ProviderInternalFactory.provision(ProviderInternalFactory.java:81)
	at com.google.inject.internal.BoundProviderFactory.provision(BoundProviderFactory.java:72)
	at com.google.inject.internal.ProviderInternalFactory.circularGet(ProviderInternalFactory.java:61)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:62)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.BoundProviderFactory.get(BoundProviderFactory.java:61)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.provision(ConstructorInjector.java:104)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:85)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:267)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1103)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.internal.SingletonScope$1.get(SingletonScope.java:145)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)
	at com.google.inject.internal.ExposedKeyFactory.get(ExposedKeyFactory.java:54)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:56)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.SingleMethodInjector.inject(SingleMethodInjector.java:84)
	at com.google.inject.internal.MembersInjectorImpl.injectMembers(MembersInjectorImpl.java:132)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:93)
	at com.google.inject.internal.MembersInjectorImpl$1.call(MembersInjectorImpl.java:80)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1092)
	at com.google.inject.internal.MembersInjectorImpl.injectAndNotify(MembersInjectorImpl.java:80)
	at com.google.inject.internal.Initializer$InjectableReference.get(Initializer.java:174)
	at com.google.inject.internal.Initializer.injectAll(Initializer.java:108)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:174)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)

50 errors
	at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:466)
	at com.google.inject.internal.InternalInjectorCreator.injectDynamically(InternalInjectorCreator.java:176)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:110)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.FrameworkBootstrap.createInjector(FrameworkBootstrap.java:107)
	at com.appdynamics.voltron.FrameworkBootstrap.start(FrameworkBootstrap.java:162)
	at com.appdynamics.voltron.FrameworkBootstrap.startAndRun(FrameworkBootstrap.java:120)
	at com.appdynamics.voltron.FrameworkApplication.start(FrameworkApplication.java:31)
	at com.appdynamics.agent.sim.Main.startSafe(Main.java:60)
	at com.appdynamics.agent.sim.bootstrap.Bootstrap.main(Bootstrap.java:45)
[main] 03 Aug 2018 09:38:34,754  INFO FlexibleX509TrustManager - Using default keystore for SSL certificate validation.
[system-thread-0] 03 Aug 2018 09:38:35,950  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:39:35,007  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:40:34,998  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:41:35,013  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:42:34,998  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:43:34,998  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[main] 03 Aug 2018 09:43:59,470  INFO FlexibleX509TrustManager - Using default keystore for SSL certificate validation.
[system-thread-0] 03 Aug 2018 09:43:59,799  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:44:59,692  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:45:59,687  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:46:59,680  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:47:59,679  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[main] 03 Aug 2018 09:49:18,072  INFO FlexibleX509TrustManager - Using default keystore for SSL certificate validation.
[system-thread-0] 03 Aug 2018 09:49:18,400  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:50:18,279  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:51:18,274  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:52:18,273  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:53:18,293  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:54:18,272  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:55:18,268  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:56:18,268  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:57:18,265  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:58:18,266  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 09:59:18,260  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:00:18,283  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:01:18,260  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:02:18,253  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:03:18,244  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:04:18,249  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:05:18,246  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:06:18,241  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:07:18,237  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:08:18,237  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:09:18,238  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:10:18,242  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:11:18,235  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:12:18,236  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:13:18,236  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:14:18,230  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:15:18,230  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:16:18,222  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:17:18,225  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:18:18,223  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:19:18,215  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:20:18,215  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:21:18,214  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:22:18,216  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:23:18,212  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:24:18,208  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:25:18,208  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:26:18,203  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:27:18,202  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:28:18,202  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:29:18,202  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:30:18,193  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:31:18,192  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:32:18,190  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:33:18,190  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:34:18,188  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:35:18,188  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:36:18,187  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:37:18,188  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:38:18,184  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:39:18,181  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:40:18,177  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:41:18,178  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:42:18,178  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:43:18,165  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:44:18,168  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:45:18,178  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:46:18,169  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:47:18,166  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:48:18,165  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:49:18,162  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:50:18,160  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:51:18,158  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:52:18,153  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:53:18,156  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:54:18,155  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:55:18,150  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:56:18,143  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:57:18,146  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:58:18,143  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 10:59:18,143  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 11:00:18,138  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 11:01:18,159  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 11:02:18,136  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 11:03:18,133  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[main] 03 Aug 2018 11:04:48,954  INFO FlexibleX509TrustManager - Using default keystore for SSL certificate validation.
[system-thread-0] 03 Aug 2018 11:05:36,495  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 11:05:49,217  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[system-thread-0] 03 Aug 2018 11:06:49,205  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:[Error Message] An agent has failed to register because its version is newer than the controller, [Controller Version] 4.4.4, [Agent Version] 4.5.1.1351, [Agent Info] Machine Agent hostId: Jun's mac
[main] 06 Aug 2018 08:49:22,274  INFO FlexibleX509TrustManager - Using default keystore for SSL certificate validation.
[system-thread-0] 06 Aug 2018 08:50:39,184  INFO SecondStageSystem - Starting main system with features Features(features=[dmm, basic], reason=Features.Reason(message=, code=))
[system-thread-0] 06 Aug 2018 08:50:39,346  INFO SystemAgent - ####################################################################################
[system-thread-0] 06 Aug 2018 08:50:39,346  INFO SystemAgent - Agent Install Directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351]
[system-thread-0] 06 Aug 2018 08:50:39,346  INFO SystemAgent - Using Agent Version [Machine Agent v4.5.1.1351 GA Build Date 2018-07-19 08:18:49]
[system-thread-0] 06 Aug 2018 08:50:39,348  INFO SystemAgent - JVM Runtime: 
	java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre
	java.vm.vendor=Oracle Corporation
	java.vm.name=Java HotSpot(TM) 64-Bit Server VM
	java.runtime.version=1.8.0_77-b03
	java.io.tmpdir=/var/folders/8q/rgr01f1x02n92jkbj189gqg92z1z00/T/
	user.language=en
	user.country=US
	user.variant=
	Default locale=en_US
[system-thread-0] 06 Aug 2018 08:50:39,348  INFO SystemAgent - OS Runtime: 
	os.name=Mac OS X
	os.arch=x86_64
	os.version=10.13.2
	user.name=jun.ouyang
	user.home=/Users/jun.ouyang
	user.dir=/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351
[system-thread-0] 06 Aug 2018 08:50:39,349  INFO SystemAgent - JVM Args : 
[system-thread-0] 06 Aug 2018 08:50:39,351  INFO SystemAgent - JVM Runtime Name: 95221@jouyang-osx
[system-thread-0] 06 Aug 2018 08:50:39,351  INFO SystemAgent - JVM PID: 95221
[system-thread-0] 06 Aug 2018 08:50:39,351  INFO SystemAgent - Machine Agent is resolving bootstrap info....
[system-thread-0] 06 Aug 2018 08:50:39,471  INFO SystemAgent - Orchestration is disabled - disabling virtualization resolvers by default.
[system-thread-0] 06 Aug 2018 08:50:39,476  INFO SystemAgent - Full Agent Registration Info Resolver found system property [appdynamics.agent.create.agent.info.if.missing] for appdynamics.agent.create.agent.info.if.missing [false]
[system-thread-0] 06 Aug 2018 08:50:39,484  INFO SystemAgent - Default Host Identifier Resolver using host name for unique host identifier [jouyang-osx]
[system-thread-0] 06 Aug 2018 08:50:39,487  INFO SystemAgent - Default IP Address Resolver found IP addresses [[fe80:0:0:0:2bb9:2114:3c30:4ef0%utun0, fe80:0:0:0:6010:7fff:fe01:a265%awdl0, 2600:1700:5ae0:1eb0:3166:f25e:f320:b523, 2600:1700:5ae0:1eb0:e055:205f:72ff:e63a, 2600:1700:5ae0:1eb0:1837:4382:ad51:9609, fe80:0:0:0:416:ac88:97a0:b2d2%en0, 192.168.1.66, fe80:0:0:0:0:0:0:1%lo0]]
[system-thread-0] 06 Aug 2018 08:50:39,490  INFO SystemAgent - Full Agent Registration Info Resolver using selfService [false]
[system-thread-0] 06 Aug 2018 08:50:39,490  INFO SystemAgent - Full Agent Registration Info Resolver using application name [null]
[system-thread-0] 06 Aug 2018 08:50:39,490  INFO SystemAgent - Full Agent Registration Info Resolver using tier name [null]
[system-thread-0] 06 Aug 2018 08:50:39,490  INFO SystemAgent - Full Agent Registration Info Resolver using node name [null]
[system-thread-0] 06 Aug 2018 08:50:39,493  INFO SystemAgent - XML Controller Info Resolver found controller host [localhost]
[system-thread-0] 06 Aug 2018 08:50:39,493  INFO SystemAgent - XML Controller Info Resolver found controller port [8080]
[system-thread-0] 06 Aug 2018 08:50:39,497  INFO SystemAgent - XML Agent Account Info Resolver using account name [Customer1]
[system-thread-0] 06 Aug 2018 08:50:39,498  INFO SystemAgent - XML Agent Account Info Resolver using account access key [****]
[system-thread-0] 06 Aug 2018 08:50:39,501  INFO SystemAgent - Keystore file /Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/conf/cacerts.jks was not found
[system-thread-0] 06 Aug 2018 08:50:39,522  INFO SystemAgent - Machine Agent resolved bootstrap info!
[system-thread-0] 06 Aug 2018 08:50:39,523  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[system-thread-0] 06 Aug 2018 08:50:39,536  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[system-thread-0] 06 Aug 2018 08:50:39,541  INFO SystemAgent - Started Agent Schedulers
[ConfigExecutor-0] 06 Aug 2018 08:50:39,546  INFO DefaultLegacyAgentRegistrationStateManager - Registered machine with machine ID [Optional.of(4)]
[ConfigExecutor-0] 06 Aug 2018 08:50:39,547  INFO DefaultLegacyAgentRegistrationStateManager - Scheduling System-Agent start...
[system-thread-0] 06 Aug 2018 08:50:39,553  INFO SimAgentRepetitiveLoggingModule - The turnover time for the SIM agent repetitive logger is 5 minutes
[system-thread-0] 06 Aug 2018 08:50:39,553  INFO SimAgentRepetitiveLoggingModule - The cache size for the SIM agent repetitive logger is 1000
[system-thread-0] 06 Aug 2018 08:50:39,704  INFO DefaultLegacyAgentRegistrationStateManager - Starting machine agent...
[system-thread-0] 06 Aug 2018 08:50:39,704  INFO SystemAgent - Starting Machine Agent....
[system-thread-0] 06 Aug 2018 08:50:39,705  INFO ControllerTimeSkewHandler - Skew Handler is : [enabled].
[system-thread-0] 06 Aug 2018 08:50:39,849  INFO ManagedMonitorDelegate - Started Agent Metric Generation Service
[system-thread-0] 06 Aug 2018 08:50:39,854  INFO ManagedMonitorDelegate - Event Service is : [enabled].
[system-thread-0] 06 Aug 2018 08:50:39,880  INFO ManagedMonitorDelegate - Metric Service is : [enabled].
[system-thread-0] 06 Aug 2018 08:50:39,891  INFO ManagedMonitorDelegate - Started Agent Env Properties Service
[system-thread-0] 06 Aug 2018 08:50:39,893  INFO ManagedMonitorDelegate - Scheduled Continuous Task Monitor with frequency [30000]ms
[system-thread-0] 06 Aug 2018 08:50:39,896  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/analytics-agent/monitor.xml
[system-thread-0] 06 Aug 2018 08:50:39,912  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 08:50:39,917  INFO NodeMonitorManager - Initializing managed monitor [analytics-agent]
[system-thread-0] 06 Aug 2018 08:50:39,917  INFO ManagedMonitorDelegate - Not initializing managed monitor [AppDynamics Analytics Agent] - Disabled in configuration file.
[system-thread-0] 06 Aug 2018 08:50:39,923  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/HardwareMonitor/monitor.xml
[system-thread-0] 06 Aug 2018 08:50:39,925  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 08:50:39,928  INFO NodeMonitorManager - Initializing managed monitor [HardwareMonitor]
[system-thread-0] 06 Aug 2018 08:50:39,928  INFO ManagedMonitorDelegate - Not initializing managed monitor [HardwareMonitor] - Disabled in configuration file.
[system-thread-0] 06 Aug 2018 08:50:39,928  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/JavaHardwareMonitor/monitor.xml
[system-thread-0] 06 Aug 2018 08:50:39,930  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 08:50:39,930  INFO NodeMonitorManager - Initializing managed monitor [JavaHardwareMonitor]
[system-thread-0] 06 Aug 2018 08:50:39,930  INFO ManagedMonitorDelegate - Initializing managed monitor [SigarHardwareMonitor]
[system-thread-0] 06 Aug 2018 08:50:39,930  INFO ManagedMonitorDelegate - Executing managed monitor [SigarHardwareMonitor], task name [null]
[system-thread-0] 06 Aug 2018 08:50:39,930  INFO ManagedMonitorDelegate - Task [null] for monitor [SigarHardwareMonitor] is SCHEDULED
[system-thread-0] 06 Aug 2018 08:50:39,934  INFO JavaTaskCreator - Task classpath not specified,System classpath will be used.
[system-thread-0] 06 Aug 2018 08:50:39,986  WARN SigarConfig - No task file found. Will use default configuration. /Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/JavaHardwareMonitor/task.xml
[system-thread-0] 06 Aug 2018 08:50:39,986  INFO SigarDelegate - Operating system is supported [MacOSX]
[system-thread-0] 06 Aug 2018 08:50:40,563  INFO NodeMonitorManager - Directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/unmanaged] not found, continuing.
[system-thread-0] 06 Aug 2018 08:50:40,564  INFO AgentMonitorManager - Initialized System Monitor Manager with directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors]
[system-thread-0] 06 Aug 2018 08:50:40,564  INFO SystemAgent - Set up agent monitor manager
[system-thread-0] 06 Aug 2018 08:50:40,567  INFO SystemAgent - Orchestration is disabled - disabling one-way agent transport. The agent will not be able to execute workflow tasks.
[system-thread-0] 06 Aug 2018 08:50:40,573  INFO SystemAgentConfigManager - Scheduling configuration refresh at an interval of 60 seconds
[system-thread-0] 06 Aug 2018 08:50:40,573  INFO SystemAgentConfigManager - Configuration refresh task interval is 60 seconds
[system-thread-0] 06 Aug 2018 08:50:40,574  INFO SystemAgent - Configuration manager successfully configured
[system-thread-0] 06 Aug 2018 08:50:40,576  INFO RunbookHandler - Runbook Operation Execution is : [enabled].
[system-thread-0] 06 Aug 2018 08:50:40,576  INFO SystemAgent - Started AppDynamics Machine Agent Successfully.
[ExtensionStarter-AgentServer] 06 Aug 2018 08:51:09,714  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-AgentServer] 06 Aug 2018 08:51:09,715  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-AgentServer] 06 Aug 2018 08:51:09,715  INFO SystemAgent - Started Agent Schedulers
[ExtensionStarter-ServerMonitoring] 06 Aug 2018 08:51:10,541  INFO ServersExtensionModule - OS is NON_SUPPORTED
[ExtensionStarter-ServerMonitoring] 06 Aug 2018 08:51:10,542  WARN ServersExtensionModule - OS Mac OS X is not supported.
[null-config-threadpool-0] 06 Aug 2018 08:51:10,617  WARN ExtensionManager - Failed to start extension ServerMonitoring.
java.util.concurrent.ExecutionException: com.google.inject.CreationException: Unable to create injector, see the following errors:

1) No implementation for com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 2 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

2) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath()
    for parameter 0 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

3) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4) Could not find a suitable constructor in java.lang.Class. Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.
  at java.lang.Class.class(Class.java:119)
  while locating java.lang.Class<? extends com.appdynamics.sim.agent.extensions.servers.model.RawCollector<?>>
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4 errors
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.startExtension(DefaultExtensionContext.java:105)
	at com.appdynamics.voltron.extensions.ExtensionManager.addNewExtensions(ExtensionManager.java:137)
	at com.appdynamics.voltron.extensions.ExtensionManager.internalApply(ExtensionManager.java:89)
	at com.appdynamics.voltron.extensions.ExtensionManager.access$000(ExtensionManager.java:35)
	at com.appdynamics.voltron.extensions.ExtensionManager$1.run(ExtensionManager.java:74)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: com.google.inject.CreationException: Unable to create injector, see the following errors:

1) No implementation for com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 2 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

2) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath()
    for parameter 0 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

3) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4) Could not find a suitable constructor in java.lang.Class. Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.
  at java.lang.Class.class(Class.java:119)
  while locating java.lang.Class<? extends com.appdynamics.sim.agent.extensions.servers.model.RawCollector<?>>
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4 errors
	at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:466)
	at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:155)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:107)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.startExtensionInternal(DefaultExtensionContext.java:185)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.access$200(DefaultExtensionContext.java:31)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext$1.run(DefaultExtensionContext.java:97)
	... 5 more
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:51:10,772  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:51:10,773  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:51:10,773  INFO SystemAgent - Started Agent Schedulers
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:51:10,783  INFO DockerMonitoringModule - Initializing Executor Service for Docker Metric Collection, pool size:  3
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:51:10,785 ERROR CGroupFileSystemRootProvider - Could not find CGroup files in following path(s) : [/sys/fs/cgroup, /cgroup]
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:51:10,787  INFO DockerMonitor - Not starting docker monitoring extension because it is disabled.
[ExtensionStarter-CrashGuard] 06 Aug 2018 08:51:10,812  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-CrashGuard] 06 Aug 2018 08:51:10,812  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-CrashGuard] 06 Aug 2018 08:51:10,812  INFO SystemAgent - Started Agent Schedulers
[ConfigExecutor-0] 06 Aug 2018 08:51:10,820  INFO CrashGuardRunner - Not starting crash guard extension because it is disabled.To enable, please update the configuration enabled in CrashGuardConfig.yml.
[AD Thread Pool-Global0] 06 Aug 2018 08:52:45,644 ERROR SystemAgentPollingForUpdate - Fatal transport error while connecting to URL [/controller/instance/4/systemagentpolling]: java.net.SocketTimeoutException: Read timed out
[AD Thread Pool-Global0] 06 Aug 2018 08:52:45,646  WARN SystemAgentPollingForUpdate - Invalid response for configuration request from controller/could not connect. Msg: Fatal transport error while connecting to URL [/controller/instance/4/systemagentpolling]
[Thread-2] 06 Aug 2018 08:53:24,194  INFO SystemAgent - Stopping Machine Agent....
[Thread-2] 06 Aug 2018 08:53:24,194  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-1] 06 Aug 2018 08:53:24,194  INFO SecondStageSystem - Stopping main system with features Features(features=[dmm, basic], reason=Features.Reason(message=, code=)).
[Thread-2] 06 Aug 2018 08:53:24,194  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-2] 06 Aug 2018 08:53:24,195  INFO SystemAgent - Shutting down agent monitor manager
[Thread-2] 06 Aug 2018 08:53:24,195  INFO ManagedMonitorDelegate - Scheduled Task [SigarHardwareMonitor] Stopped
[Thread-2] 06 Aug 2018 08:53:24,196  INFO ManagedMonitorDelegate - shutdown metric generation service.
[Thread-2] 06 Aug 2018 08:53:24,196  INFO SystemAgent - Stopped agent monitor manager
[Thread-2] 06 Aug 2018 08:53:24,196  INFO SystemAgent - Shutting down scheduler
[Thread-2] 06 Aug 2018 08:53:24,196  INFO SystemAgent - Stopped scheduler
[Thread-2] 06 Aug 2018 08:53:24,196  INFO SystemAgent - Shutting down monitor scheduler
[Thread-2] 06 Aug 2018 08:53:24,196  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-AgentServer] 06 Aug 2018 08:53:24,196  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-AgentServer] 06 Aug 2018 08:53:24,196  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-AgentServer] 06 Aug 2018 08:53:24,197  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-AgentServer] 06 Aug 2018 08:53:24,197  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 08:53:24,197  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 08:53:24,197  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 08:53:24,197  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 08:53:24,197  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-CrashGuard] 06 Aug 2018 08:53:24,198  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-CrashGuard] 06 Aug 2018 08:53:24,198  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-CrashGuard] 06 Aug 2018 08:53:24,198  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-CrashGuard] 06 Aug 2018 08:53:24,198  INFO SystemAgent - Machine Agent Stopped!
[Thread-1] 06 Aug 2018 08:53:24,198  INFO ManagedScheduledThreadPool - Shutting down extensions thread pool
[Thread-1] 06 Aug 2018 08:53:24,198  INFO SystemAgent - Stopping Machine Agent....
[Thread-1] 06 Aug 2018 08:53:24,198  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-1] 06 Aug 2018 08:53:24,198  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-1] 06 Aug 2018 08:53:24,198  INFO SystemAgent - Machine Agent Stopped!
[main] 06 Aug 2018 08:53:37,592  INFO FlexibleX509TrustManager - Using default keystore for SSL certificate validation.
[system-thread-0] 06 Aug 2018 08:53:37,973  INFO SecondStageSystem - Starting main system with features Features(features=[dmm, basic], reason=Features.Reason(message=, code=))
[system-thread-0] 06 Aug 2018 08:53:38,107  INFO SystemAgent - ####################################################################################
[system-thread-0] 06 Aug 2018 08:53:38,107  INFO SystemAgent - Agent Install Directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351]
[system-thread-0] 06 Aug 2018 08:53:38,107  INFO SystemAgent - Using Agent Version [Machine Agent v4.5.1.1351 GA Build Date 2018-07-19 08:18:49]
[system-thread-0] 06 Aug 2018 08:53:38,108  INFO SystemAgent - JVM Runtime: 
	java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre
	java.vm.vendor=Oracle Corporation
	java.vm.name=Java HotSpot(TM) 64-Bit Server VM
	java.runtime.version=1.8.0_77-b03
	java.io.tmpdir=/var/folders/8q/rgr01f1x02n92jkbj189gqg92z1z00/T/
	user.language=en
	user.country=US
	user.variant=
	Default locale=en_US
[system-thread-0] 06 Aug 2018 08:53:38,108  INFO SystemAgent - OS Runtime: 
	os.name=Mac OS X
	os.arch=x86_64
	os.version=10.13.2
	user.name=jun.ouyang
	user.home=/Users/jun.ouyang
	user.dir=/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351
[system-thread-0] 06 Aug 2018 08:53:38,109  INFO SystemAgent - JVM Args : 
[system-thread-0] 06 Aug 2018 08:53:38,109  INFO SystemAgent - JVM Runtime Name: 95478@jouyang-osx
[system-thread-0] 06 Aug 2018 08:53:38,109  INFO SystemAgent - JVM PID: 95478
[system-thread-0] 06 Aug 2018 08:53:38,110  INFO SystemAgent - Machine Agent is resolving bootstrap info....
[system-thread-0] 06 Aug 2018 08:53:38,250  INFO SystemAgent - Orchestration is disabled - disabling virtualization resolvers by default.
[system-thread-0] 06 Aug 2018 08:53:38,254  INFO SystemAgent - Full Agent Registration Info Resolver found system property [appdynamics.agent.create.agent.info.if.missing] for appdynamics.agent.create.agent.info.if.missing [false]
[system-thread-0] 06 Aug 2018 08:53:38,263  INFO SystemAgent - Default Host Identifier Resolver using host name for unique host identifier [jouyang-osx]
[system-thread-0] 06 Aug 2018 08:53:38,266  INFO SystemAgent - Default IP Address Resolver found IP addresses [[fe80:0:0:0:2bb9:2114:3c30:4ef0%utun0, fe80:0:0:0:6010:7fff:fe01:a265%awdl0, 2600:1700:5ae0:1eb0:3166:f25e:f320:b523, 2600:1700:5ae0:1eb0:e055:205f:72ff:e63a, 2600:1700:5ae0:1eb0:1837:4382:ad51:9609, fe80:0:0:0:416:ac88:97a0:b2d2%en0, 192.168.1.66, fe80:0:0:0:0:0:0:1%lo0]]
[system-thread-0] 06 Aug 2018 08:53:38,268  INFO SystemAgent - Full Agent Registration Info Resolver using selfService [false]
[system-thread-0] 06 Aug 2018 08:53:38,268  INFO SystemAgent - Full Agent Registration Info Resolver using application name [null]
[system-thread-0] 06 Aug 2018 08:53:38,268  INFO SystemAgent - Full Agent Registration Info Resolver using tier name [null]
[system-thread-0] 06 Aug 2018 08:53:38,268  INFO SystemAgent - Full Agent Registration Info Resolver using node name [null]
[system-thread-0] 06 Aug 2018 08:53:38,271  INFO SystemAgent - XML Controller Info Resolver found controller host [localhost]
[system-thread-0] 06 Aug 2018 08:53:38,272  INFO SystemAgent - XML Controller Info Resolver found controller port [8080]
[system-thread-0] 06 Aug 2018 08:53:38,276  INFO SystemAgent - XML Agent Account Info Resolver using account name [Customer1]
[system-thread-0] 06 Aug 2018 08:53:38,276  INFO SystemAgent - XML Agent Account Info Resolver using account access key [****]
[system-thread-0] 06 Aug 2018 08:53:38,278  INFO SystemAgent - Keystore file /Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/conf/cacerts.jks was not found
[system-thread-0] 06 Aug 2018 08:53:38,288  INFO SystemAgent - Machine Agent resolved bootstrap info!
[system-thread-0] 06 Aug 2018 08:53:38,288  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[system-thread-0] 06 Aug 2018 08:53:38,299  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[system-thread-0] 06 Aug 2018 08:53:38,302  INFO SystemAgent - Started Agent Schedulers
[ConfigExecutor-0] 06 Aug 2018 08:53:38,304  INFO DefaultLegacyAgentRegistrationStateManager - Registered machine with machine ID [Optional.of(4)]
[ConfigExecutor-0] 06 Aug 2018 08:53:38,305  INFO DefaultLegacyAgentRegistrationStateManager - Scheduling System-Agent start...
[system-thread-0] 06 Aug 2018 08:53:38,308  INFO SimAgentRepetitiveLoggingModule - The turnover time for the SIM agent repetitive logger is 5 minutes
[system-thread-0] 06 Aug 2018 08:53:38,308  INFO SimAgentRepetitiveLoggingModule - The cache size for the SIM agent repetitive logger is 1000
[system-thread-0] 06 Aug 2018 08:53:38,444  INFO DefaultLegacyAgentRegistrationStateManager - Starting machine agent...
[system-thread-0] 06 Aug 2018 08:53:38,444  INFO SystemAgent - Starting Machine Agent....
[system-thread-0] 06 Aug 2018 08:53:38,445  INFO ControllerTimeSkewHandler - Skew Handler is : [enabled].
[system-thread-0] 06 Aug 2018 08:53:38,472  INFO ManagedMonitorDelegate - Started Agent Metric Generation Service
[system-thread-0] 06 Aug 2018 08:53:38,476  INFO ManagedMonitorDelegate - Event Service is : [enabled].
[system-thread-0] 06 Aug 2018 08:53:38,487  INFO ManagedMonitorDelegate - Metric Service is : [enabled].
[system-thread-0] 06 Aug 2018 08:53:38,495  INFO ManagedMonitorDelegate - Started Agent Env Properties Service
[system-thread-0] 06 Aug 2018 08:53:38,496  INFO ManagedMonitorDelegate - Scheduled Continuous Task Monitor with frequency [30000]ms
[system-thread-0] 06 Aug 2018 08:53:38,498  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/analytics-agent/monitor.xml
[system-thread-0] 06 Aug 2018 08:53:38,513  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 08:53:38,517  INFO NodeMonitorManager - Initializing managed monitor [analytics-agent]
[system-thread-0] 06 Aug 2018 08:53:38,517  INFO ManagedMonitorDelegate - Not initializing managed monitor [AppDynamics Analytics Agent] - Disabled in configuration file.
[system-thread-0] 06 Aug 2018 08:53:38,521  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/HardwareMonitor/monitor.xml
[system-thread-0] 06 Aug 2018 08:53:38,523  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 08:53:38,525  INFO NodeMonitorManager - Initializing managed monitor [HardwareMonitor]
[system-thread-0] 06 Aug 2018 08:53:38,525  INFO ManagedMonitorDelegate - Not initializing managed monitor [HardwareMonitor] - Disabled in configuration file.
[system-thread-0] 06 Aug 2018 08:53:38,525  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/JavaHardwareMonitor/monitor.xml
[system-thread-0] 06 Aug 2018 08:53:38,527  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 08:53:38,528  INFO NodeMonitorManager - Initializing managed monitor [JavaHardwareMonitor]
[system-thread-0] 06 Aug 2018 08:53:38,528  INFO ManagedMonitorDelegate - Initializing managed monitor [SigarHardwareMonitor]
[system-thread-0] 06 Aug 2018 08:53:38,528  INFO ManagedMonitorDelegate - Executing managed monitor [SigarHardwareMonitor], task name [null]
[system-thread-0] 06 Aug 2018 08:53:38,528  INFO ManagedMonitorDelegate - Task [null] for monitor [SigarHardwareMonitor] is SCHEDULED
[system-thread-0] 06 Aug 2018 08:53:38,531  INFO JavaTaskCreator - Task classpath not specified,System classpath will be used.
[system-thread-0] 06 Aug 2018 08:53:38,569  WARN SigarConfig - No task file found. Will use default configuration. /Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/JavaHardwareMonitor/task.xml
[system-thread-0] 06 Aug 2018 08:53:38,569  INFO SigarDelegate - Operating system is supported [MacOSX]
[system-thread-0] 06 Aug 2018 08:53:39,110  INFO NodeMonitorManager - Directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/unmanaged] not found, continuing.
[system-thread-0] 06 Aug 2018 08:53:39,110  INFO AgentMonitorManager - Initialized System Monitor Manager with directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors]
[system-thread-0] 06 Aug 2018 08:53:39,110  INFO SystemAgent - Set up agent monitor manager
[system-thread-0] 06 Aug 2018 08:53:39,111  INFO SystemAgent - Orchestration is disabled - disabling one-way agent transport. The agent will not be able to execute workflow tasks.
[system-thread-0] 06 Aug 2018 08:53:39,114  INFO SystemAgentConfigManager - Scheduling configuration refresh at an interval of 60 seconds
[system-thread-0] 06 Aug 2018 08:53:39,114  INFO SystemAgentConfigManager - Configuration refresh task interval is 60 seconds
[system-thread-0] 06 Aug 2018 08:53:39,114  INFO SystemAgent - Configuration manager successfully configured
[system-thread-0] 06 Aug 2018 08:53:39,116  INFO RunbookHandler - Runbook Operation Execution is : [enabled].
[system-thread-0] 06 Aug 2018 08:53:39,116  INFO SystemAgent - Started AppDynamics Machine Agent Successfully.
[ExtensionStarter-AgentServer] 06 Aug 2018 08:54:08,397  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-AgentServer] 06 Aug 2018 08:54:08,398  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-AgentServer] 06 Aug 2018 08:54:08,398  INFO SystemAgent - Started Agent Schedulers
[ExtensionStarter-ServerMonitoring] 06 Aug 2018 08:54:09,023  INFO ServersExtensionModule - OS is NON_SUPPORTED
[ExtensionStarter-ServerMonitoring] 06 Aug 2018 08:54:09,024  WARN ServersExtensionModule - OS Mac OS X is not supported.
[null-config-threadpool-0] 06 Aug 2018 08:54:09,093  WARN ExtensionManager - Failed to start extension ServerMonitoring.
java.util.concurrent.ExecutionException: com.google.inject.CreationException: Unable to create injector, see the following errors:

1) No implementation for com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 2 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

2) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath()
    for parameter 0 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

3) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4) Could not find a suitable constructor in java.lang.Class. Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.
  at java.lang.Class.class(Class.java:119)
  while locating java.lang.Class<? extends com.appdynamics.sim.agent.extensions.servers.model.RawCollector<?>>
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4 errors
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.startExtension(DefaultExtensionContext.java:105)
	at com.appdynamics.voltron.extensions.ExtensionManager.addNewExtensions(ExtensionManager.java:137)
	at com.appdynamics.voltron.extensions.ExtensionManager.internalApply(ExtensionManager.java:89)
	at com.appdynamics.voltron.extensions.ExtensionManager.access$000(ExtensionManager.java:35)
	at com.appdynamics.voltron.extensions.ExtensionManager$1.run(ExtensionManager.java:74)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: com.google.inject.CreationException: Unable to create injector, see the following errors:

1) No implementation for com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 2 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

2) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath()
    for parameter 0 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

3) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4) Could not find a suitable constructor in java.lang.Class. Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.
  at java.lang.Class.class(Class.java:119)
  while locating java.lang.Class<? extends com.appdynamics.sim.agent.extensions.servers.model.RawCollector<?>>
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4 errors
	at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:466)
	at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:155)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:107)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.startExtensionInternal(DefaultExtensionContext.java:185)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.access$200(DefaultExtensionContext.java:31)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext$1.run(DefaultExtensionContext.java:97)
	... 5 more
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:54:09,213  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:54:09,214  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:54:09,214  INFO SystemAgent - Started Agent Schedulers
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:54:09,225  INFO DockerMonitoringModule - Initializing Executor Service for Docker Metric Collection, pool size:  3
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:54:09,226 ERROR CGroupFileSystemRootProvider - Could not find CGroup files in following path(s) : [/sys/fs/cgroup, /cgroup]
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 08:54:09,227  INFO DockerMonitor - Not starting docker monitoring extension because it is disabled.
[ExtensionStarter-CrashGuard] 06 Aug 2018 08:54:09,246  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-CrashGuard] 06 Aug 2018 08:54:09,246  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-CrashGuard] 06 Aug 2018 08:54:09,247  INFO SystemAgent - Started Agent Schedulers
[ConfigExecutor-0] 06 Aug 2018 08:54:09,256  INFO CrashGuardRunner - Not starting crash guard extension because it is disabled.To enable, please update the configuration enabled in CrashGuardConfig.yml.
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,593  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using selfService [false]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,593  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using application name [hello4]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,593  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using tier name [database]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,593  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using node name [kakaka-node]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,605  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using selfService [false]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,605  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using application name [hello3,]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,605  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using tier name [database]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,605  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using node name [database-node]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,617  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using selfService [false]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,617  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using application name [hello2]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,617  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using tier name [bookservice]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,617  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using node name [bookservice-node]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,629  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using selfService [false]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,629  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using application name [hello1]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,629  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using tier name [web]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,629  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using node name [web-node]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,640  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using selfService [false]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,640  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using application name [hello1]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,640  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using tier name [web]
[Agent-Monitor-Scheduler-4] 06 Aug 2018 08:56:53,640  INFO SigarAppAgentMonitor - Full Agent Registration Info Resolver using node name [web-node]
[Agent-Scheduler-1] 06 Aug 2018 09:04:05,233 ERROR ControllerTimeSkewHandler - Fatal transport error while connecting to URL [/controller/instance/4/current-time]: org.apache.http.NoHttpResponseException: localhost:8080 failed to respond
[Agent-Scheduler-1] 06 Aug 2018 09:04:05,234 ERROR ControllerTimeSkewHandler - Error response from controller: Fatal transport error while connecting to URL [/controller/instance/4/current-time]
[system-thread-0] 06 Aug 2018 09:04:30,840  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:Registration info, Application: [hello2], tier: [hello-node], node: [null]. Agent unique host information: Jun's mac (machine id 4) Application component node name is not specified
[system-thread-0] 06 Aug 2018 09:06:35,978  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:Registration info, Application: [hello2], tier: [hello-node], node: [null]. Agent unique host information: Jun's mac (machine id 4) Application component node name is not specified
[AD Thread-Metric Reporter1] 06 Aug 2018 09:08:08,496 ERROR ManagedMonitorDelegate - Fatal transport error while connecting to URL [/controller/instance/4/metrics]: java.net.SocketTimeoutException: Read timed out
[AD Thread-Metric Reporter1] 06 Aug 2018 09:08:08,498  WARN ManagedMonitorDelegate - Error sending metric data to controller:Fatal transport error while connecting to URL [/controller/instance/4/metrics]
[AD Thread-Metric Reporter1] 06 Aug 2018 09:08:08,499 ERROR ManagedMonitorDelegate - Error sending metrics - will requeue for later transmission
com.singularity.ee.agent.commonservices.metricgeneration.metrics.MetricSendException: Fatal transport error while connecting to URL [/controller/instance/4/metrics]
	at com.singularity.ee.agent.commonservices.metricgeneration.AMetricSubscriber.publish(AMetricSubscriber.java:350)
	at com.singularity.ee.agent.commonservices.metricgeneration.MetricReporter.run(MetricReporter.java:113)
	at com.singularity.ee.util.javaspecific.scheduler.AgentScheduledExecutorServiceImpl$SafeRunnable.run(AgentScheduledExecutorServiceImpl.java:122)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at com.singularity.ee.util.javaspecific.scheduler.ADFutureTask$Sync.innerRunAndReset(ADFutureTask.java:335)
	at com.singularity.ee.util.javaspecific.scheduler.ADFutureTask.runAndReset(ADFutureTask.java:152)
	at com.singularity.ee.util.javaspecific.scheduler.ADScheduledThreadPoolExecutor$ADScheduledFutureTask.access$101(ADScheduledThreadPoolExecutor.java:119)
	at com.singularity.ee.util.javaspecific.scheduler.ADScheduledThreadPoolExecutor$ADScheduledFutureTask.runPeriodic(ADScheduledThreadPoolExecutor.java:206)
	at com.singularity.ee.util.javaspecific.scheduler.ADScheduledThreadPoolExecutor$ADScheduledFutureTask.run(ADScheduledThreadPoolExecutor.java:236)
	at com.singularity.ee.util.javaspecific.scheduler.ADThreadPoolExecutor$Worker.runTask(ADThreadPoolExecutor.java:694)
	at com.singularity.ee.util.javaspecific.scheduler.ADThreadPoolExecutor$Worker.run(ADThreadPoolExecutor.java:726)
	at java.lang.Thread.run(Thread.java:745)
[AD Thread Pool-Global0] 06 Aug 2018 09:08:19,326 ERROR SystemAgentPollingForUpdate - Fatal transport error while connecting to URL [/controller/instance/4/systemagentpolling]: java.net.SocketTimeoutException: Read timed out
[AD Thread Pool-Global0] 06 Aug 2018 09:08:19,327  WARN SystemAgentPollingForUpdate - Invalid response for configuration request from controller/could not connect. Msg: Fatal transport error while connecting to URL [/controller/instance/4/systemagentpolling]
[system-thread-0] 06 Aug 2018 09:14:07,056  WARN RegistrationTask - Encountered error during registration. Will retry in 60 seconds.
The server experienced an unknown internal error. Please retry the operation, and if the problem persists, please contact support. (500 - UNKNOWN_INTERNAL_ERROR)
	* Additional Info:Registration info, Application: [hello2], tier: [hello-node], node: [null]. Agent unique host information: Jun's mac (machine id 4) Application component node name is not specified
[AD Thread Pool-Global0] 06 Aug 2018 09:18:07,164 ERROR SystemAgentPollingForUpdate - Fatal transport error while connecting to URL [/controller/instance/4/systemagentpolling]: java.net.SocketTimeoutException: Read timed out
[AD Thread Pool-Global0] 06 Aug 2018 09:18:07,166  WARN SystemAgentPollingForUpdate - Invalid response for configuration request from controller/could not connect. Msg: Fatal transport error while connecting to URL [/controller/instance/4/systemagentpolling]
[AD Thread-Metric Reporter0] 06 Aug 2018 09:18:08,494 ERROR ManagedMonitorDelegate - Fatal transport error while connecting to URL [/controller/instance/4/metrics]: java.net.SocketTimeoutException: Read timed out
[AD Thread-Metric Reporter0] 06 Aug 2018 09:18:08,495  WARN ManagedMonitorDelegate - Error sending metric data to controller:Fatal transport error while connecting to URL [/controller/instance/4/metrics]
[AD Thread-Metric Reporter0] 06 Aug 2018 09:18:08,495 ERROR ManagedMonitorDelegate - Error sending metrics - will requeue for later transmission
com.singularity.ee.agent.commonservices.metricgeneration.metrics.MetricSendException: Fatal transport error while connecting to URL [/controller/instance/4/metrics]
	at com.singularity.ee.agent.commonservices.metricgeneration.AMetricSubscriber.publish(AMetricSubscriber.java:350)
	at com.singularity.ee.agent.commonservices.metricgeneration.MetricReporter.run(MetricReporter.java:113)
	at com.singularity.ee.util.javaspecific.scheduler.AgentScheduledExecutorServiceImpl$SafeRunnable.run(AgentScheduledExecutorServiceImpl.java:122)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at com.singularity.ee.util.javaspecific.scheduler.ADFutureTask$Sync.innerRunAndReset(ADFutureTask.java:335)
	at com.singularity.ee.util.javaspecific.scheduler.ADFutureTask.runAndReset(ADFutureTask.java:152)
	at com.singularity.ee.util.javaspecific.scheduler.ADScheduledThreadPoolExecutor$ADScheduledFutureTask.access$101(ADScheduledThreadPoolExecutor.java:119)
	at com.singularity.ee.util.javaspecific.scheduler.ADScheduledThreadPoolExecutor$ADScheduledFutureTask.runPeriodic(ADScheduledThreadPoolExecutor.java:206)
	at com.singularity.ee.util.javaspecific.scheduler.ADScheduledThreadPoolExecutor$ADScheduledFutureTask.run(ADScheduledThreadPoolExecutor.java:236)
	at com.singularity.ee.util.javaspecific.scheduler.ADThreadPoolExecutor$Worker.runTask(ADThreadPoolExecutor.java:694)
	at com.singularity.ee.util.javaspecific.scheduler.ADThreadPoolExecutor$Worker.run(ADThreadPoolExecutor.java:726)
	at java.lang.Thread.run(Thread.java:745)
[Thread-2] 06 Aug 2018 09:20:59,770  INFO SystemAgent - Stopping Machine Agent....
[Thread-1] 06 Aug 2018 09:20:59,771  INFO SecondStageSystem - Stopping main system with features Features(features=[dmm, basic], reason=Features.Reason(message=, code=)).
[Thread-2] 06 Aug 2018 09:20:59,772  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-2] 06 Aug 2018 09:20:59,772  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-2] 06 Aug 2018 09:20:59,772  INFO SystemAgent - Shutting down agent monitor manager
[Thread-2] 06 Aug 2018 09:20:59,773  INFO ManagedMonitorDelegate - Scheduled Task [SigarHardwareMonitor] Stopped
[Thread-2] 06 Aug 2018 09:20:59,773  INFO ManagedMonitorDelegate - shutdown metric generation service.
[Thread-2] 06 Aug 2018 09:20:59,773  INFO SystemAgent - Stopped agent monitor manager
[Thread-2] 06 Aug 2018 09:20:59,773  INFO SystemAgent - Shutting down scheduler
[Thread-2] 06 Aug 2018 09:20:59,773  INFO SystemAgent - Stopped scheduler
[Thread-2] 06 Aug 2018 09:20:59,773  INFO SystemAgent - Shutting down monitor scheduler
[Thread-2] 06 Aug 2018 09:20:59,774  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-AgentServer] 06 Aug 2018 09:20:59,775  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-AgentServer] 06 Aug 2018 09:20:59,775  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-AgentServer] 06 Aug 2018 09:20:59,775  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-AgentServer] 06 Aug 2018 09:20:59,775  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:20:59,776  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:20:59,776  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:20:59,776  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:20:59,776  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:20:59,776  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:20:59,776  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:20:59,776  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:20:59,776  INFO SystemAgent - Machine Agent Stopped!
[Thread-1] 06 Aug 2018 09:20:59,777  INFO ManagedScheduledThreadPool - Shutting down extensions thread pool
[Thread-1] 06 Aug 2018 09:20:59,777  INFO SystemAgent - Stopping Machine Agent....
[Thread-1] 06 Aug 2018 09:20:59,777  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-1] 06 Aug 2018 09:20:59,777  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-1] 06 Aug 2018 09:20:59,777  INFO SystemAgent - Machine Agent Stopped!
[main] 06 Aug 2018 09:21:05,349  INFO FlexibleX509TrustManager - Using default keystore for SSL certificate validation.
[system-thread-0] 06 Aug 2018 09:21:05,920  INFO SecondStageSystem - Starting main system with features Features(features=[dmm, basic], reason=Features.Reason(message=, code=))
[system-thread-0] 06 Aug 2018 09:21:06,210  INFO SystemAgent - ####################################################################################
[system-thread-0] 06 Aug 2018 09:21:06,210  INFO SystemAgent - Agent Install Directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351]
[system-thread-0] 06 Aug 2018 09:21:06,211  INFO SystemAgent - Using Agent Version [Machine Agent v4.5.1.1351 GA Build Date 2018-07-19 08:18:49]
[system-thread-0] 06 Aug 2018 09:21:06,213  INFO SystemAgent - JVM Runtime: 
	java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre
	java.vm.vendor=Oracle Corporation
	java.vm.name=Java HotSpot(TM) 64-Bit Server VM
	java.runtime.version=1.8.0_77-b03
	java.io.tmpdir=/var/folders/8q/rgr01f1x02n92jkbj189gqg92z1z00/T/
	user.language=en
	user.country=US
	user.variant=
	Default locale=en_US
[system-thread-0] 06 Aug 2018 09:21:06,213  INFO SystemAgent - OS Runtime: 
	os.name=Mac OS X
	os.arch=x86_64
	os.version=10.13.2
	user.name=jun.ouyang
	user.home=/Users/jun.ouyang
	user.dir=/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351
[system-thread-0] 06 Aug 2018 09:21:06,214  INFO SystemAgent - JVM Args : 
[system-thread-0] 06 Aug 2018 09:21:06,215  INFO SystemAgent - JVM Runtime Name: 97615@jouyang-osx
[system-thread-0] 06 Aug 2018 09:21:06,216  INFO SystemAgent - JVM PID: 97615
[system-thread-0] 06 Aug 2018 09:21:06,216  INFO SystemAgent - Machine Agent is resolving bootstrap info....
[system-thread-0] 06 Aug 2018 09:21:06,485  INFO SystemAgent - Orchestration is disabled - disabling virtualization resolvers by default.
[system-thread-0] 06 Aug 2018 09:21:06,498  INFO SystemAgent - Full Agent Registration Info Resolver found system property [appdynamics.agent.create.agent.info.if.missing] for appdynamics.agent.create.agent.info.if.missing [false]
[system-thread-0] 06 Aug 2018 09:21:06,524  INFO SystemAgent - Default Host Identifier Resolver using host name for unique host identifier [jouyang-osx]
[system-thread-0] 06 Aug 2018 09:21:06,531  INFO SystemAgent - Default IP Address Resolver found IP addresses [[fe80:0:0:0:2bb9:2114:3c30:4ef0%utun0, fe80:0:0:0:6010:7fff:fe01:a265%awdl0, 2600:1700:5ae0:1eb0:3166:f25e:f320:b523, 2600:1700:5ae0:1eb0:e055:205f:72ff:e63a, 2600:1700:5ae0:1eb0:1837:4382:ad51:9609, fe80:0:0:0:416:ac88:97a0:b2d2%en0, 192.168.1.66, fe80:0:0:0:0:0:0:1%lo0]]
[system-thread-0] 06 Aug 2018 09:21:06,538  INFO SystemAgent - Full Agent Registration Info Resolver using selfService [false]
[system-thread-0] 06 Aug 2018 09:21:06,538  INFO SystemAgent - Full Agent Registration Info Resolver using application name [null]
[system-thread-0] 06 Aug 2018 09:21:06,538  INFO SystemAgent - Full Agent Registration Info Resolver using tier name [null]
[system-thread-0] 06 Aug 2018 09:21:06,538  INFO SystemAgent - Full Agent Registration Info Resolver using node name [null]
[system-thread-0] 06 Aug 2018 09:21:06,547  INFO SystemAgent - XML Controller Info Resolver found controller host [localhost]
[system-thread-0] 06 Aug 2018 09:21:06,548  INFO SystemAgent - XML Controller Info Resolver found controller port [8080]
[system-thread-0] 06 Aug 2018 09:21:06,557  INFO SystemAgent - XML Agent Account Info Resolver using account name [Customer1]
[system-thread-0] 06 Aug 2018 09:21:06,558  INFO SystemAgent - XML Agent Account Info Resolver using account access key [****]
[system-thread-0] 06 Aug 2018 09:21:06,563  INFO SystemAgent - Keystore file /Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/conf/cacerts.jks was not found
[system-thread-0] 06 Aug 2018 09:21:06,593  INFO SystemAgent - Machine Agent resolved bootstrap info!
[system-thread-0] 06 Aug 2018 09:21:06,594  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[system-thread-0] 06 Aug 2018 09:21:06,613  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[system-thread-0] 06 Aug 2018 09:21:06,621  INFO SystemAgent - Started Agent Schedulers
[ConfigExecutor-0] 06 Aug 2018 09:21:06,624  INFO DefaultLegacyAgentRegistrationStateManager - Registered machine with machine ID [Optional.of(4)]
[ConfigExecutor-0] 06 Aug 2018 09:21:06,624  INFO DefaultLegacyAgentRegistrationStateManager - Scheduling System-Agent start...
[system-thread-0] 06 Aug 2018 09:21:06,629  INFO SimAgentRepetitiveLoggingModule - The turnover time for the SIM agent repetitive logger is 5 minutes
[system-thread-0] 06 Aug 2018 09:21:06,630  INFO SimAgentRepetitiveLoggingModule - The cache size for the SIM agent repetitive logger is 1000
[system-thread-0] 06 Aug 2018 09:21:06,767  INFO DefaultLegacyAgentRegistrationStateManager - Starting machine agent...
[system-thread-0] 06 Aug 2018 09:21:06,767  INFO SystemAgent - Starting Machine Agent....
[system-thread-0] 06 Aug 2018 09:21:06,768  INFO ControllerTimeSkewHandler - Skew Handler is : [enabled].
[system-thread-0] 06 Aug 2018 09:21:06,797  INFO ManagedMonitorDelegate - Started Agent Metric Generation Service
[system-thread-0] 06 Aug 2018 09:21:06,801  INFO ManagedMonitorDelegate - Event Service is : [enabled].
[system-thread-0] 06 Aug 2018 09:21:06,812  INFO ManagedMonitorDelegate - Metric Service is : [enabled].
[system-thread-0] 06 Aug 2018 09:21:06,821  INFO ManagedMonitorDelegate - Started Agent Env Properties Service
[system-thread-0] 06 Aug 2018 09:21:06,822  INFO ManagedMonitorDelegate - Scheduled Continuous Task Monitor with frequency [30000]ms
[system-thread-0] 06 Aug 2018 09:21:06,824  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/analytics-agent/monitor.xml
[system-thread-0] 06 Aug 2018 09:21:06,838  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 09:21:06,841  INFO NodeMonitorManager - Initializing managed monitor [analytics-agent]
[system-thread-0] 06 Aug 2018 09:21:06,841  INFO ManagedMonitorDelegate - Not initializing managed monitor [AppDynamics Analytics Agent] - Disabled in configuration file.
[system-thread-0] 06 Aug 2018 09:21:06,846  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/HardwareMonitor/monitor.xml
[system-thread-0] 06 Aug 2018 09:21:06,848  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 09:21:06,851  INFO NodeMonitorManager - Initializing managed monitor [HardwareMonitor]
[system-thread-0] 06 Aug 2018 09:21:06,851  INFO ManagedMonitorDelegate - Not initializing managed monitor [HardwareMonitor] - Disabled in configuration file.
[system-thread-0] 06 Aug 2018 09:21:06,851  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/JavaHardwareMonitor/monitor.xml
[system-thread-0] 06 Aug 2018 09:21:06,853  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 09:21:06,853  INFO NodeMonitorManager - Initializing managed monitor [JavaHardwareMonitor]
[system-thread-0] 06 Aug 2018 09:21:06,853  INFO ManagedMonitorDelegate - Initializing managed monitor [SigarHardwareMonitor]
[system-thread-0] 06 Aug 2018 09:21:06,853  INFO ManagedMonitorDelegate - Executing managed monitor [SigarHardwareMonitor], task name [null]
[system-thread-0] 06 Aug 2018 09:21:06,853  INFO ManagedMonitorDelegate - Task [null] for monitor [SigarHardwareMonitor] is SCHEDULED
[system-thread-0] 06 Aug 2018 09:21:06,856  INFO JavaTaskCreator - Task classpath not specified,System classpath will be used.
[system-thread-0] 06 Aug 2018 09:21:06,898  WARN SigarConfig - No task file found. Will use default configuration. /Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/JavaHardwareMonitor/task.xml
[system-thread-0] 06 Aug 2018 09:21:06,899  INFO SigarDelegate - Operating system is supported [MacOSX]
[system-thread-0] 06 Aug 2018 09:21:07,446  INFO NodeMonitorManager - Directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/unmanaged] not found, continuing.
[system-thread-0] 06 Aug 2018 09:21:07,447  INFO AgentMonitorManager - Initialized System Monitor Manager with directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors]
[system-thread-0] 06 Aug 2018 09:21:07,447  INFO SystemAgent - Set up agent monitor manager
[system-thread-0] 06 Aug 2018 09:21:07,448  INFO SystemAgent - Orchestration is disabled - disabling one-way agent transport. The agent will not be able to execute workflow tasks.
[system-thread-0] 06 Aug 2018 09:21:07,451  INFO SystemAgentConfigManager - Scheduling configuration refresh at an interval of 60 seconds
[system-thread-0] 06 Aug 2018 09:21:07,451  INFO SystemAgentConfigManager - Configuration refresh task interval is 60 seconds
[system-thread-0] 06 Aug 2018 09:21:07,451  INFO SystemAgent - Configuration manager successfully configured
[system-thread-0] 06 Aug 2018 09:21:07,453  INFO RunbookHandler - Runbook Operation Execution is : [enabled].
[system-thread-0] 06 Aug 2018 09:21:07,453  INFO SystemAgent - Started AppDynamics Machine Agent Successfully.
[ExtensionStarter-AgentServer] 06 Aug 2018 09:21:36,725  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-AgentServer] 06 Aug 2018 09:21:36,725  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-AgentServer] 06 Aug 2018 09:21:36,725  INFO SystemAgent - Started Agent Schedulers
[ExtensionStarter-ServerMonitoring] 06 Aug 2018 09:21:37,280  INFO ServersExtensionModule - OS is NON_SUPPORTED
[ExtensionStarter-ServerMonitoring] 06 Aug 2018 09:21:37,280  WARN ServersExtensionModule - OS Mac OS X is not supported.
[null-config-threadpool-0] 06 Aug 2018 09:21:37,376  WARN ExtensionManager - Failed to start extension ServerMonitoring.
java.util.concurrent.ExecutionException: com.google.inject.CreationException: Unable to create injector, see the following errors:

1) No implementation for com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 2 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

2) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath()
    for parameter 0 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

3) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4) Could not find a suitable constructor in java.lang.Class. Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.
  at java.lang.Class.class(Class.java:119)
  while locating java.lang.Class<? extends com.appdynamics.sim.agent.extensions.servers.model.RawCollector<?>>
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4 errors
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.startExtension(DefaultExtensionContext.java:105)
	at com.appdynamics.voltron.extensions.ExtensionManager.addNewExtensions(ExtensionManager.java:137)
	at com.appdynamics.voltron.extensions.ExtensionManager.internalApply(ExtensionManager.java:89)
	at com.appdynamics.voltron.extensions.ExtensionManager.access$000(ExtensionManager.java:35)
	at com.appdynamics.voltron.extensions.ExtensionManager$1.run(ExtensionManager.java:74)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: com.google.inject.CreationException: Unable to create injector, see the following errors:

1) No implementation for com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 2 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

2) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath()
    for parameter 0 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

3) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4) Could not find a suitable constructor in java.lang.Class. Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.
  at java.lang.Class.class(Class.java:119)
  while locating java.lang.Class<? extends com.appdynamics.sim.agent.extensions.servers.model.RawCollector<?>>
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4 errors
	at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:466)
	at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:155)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:107)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.startExtensionInternal(DefaultExtensionContext.java:185)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.access$200(DefaultExtensionContext.java:31)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext$1.run(DefaultExtensionContext.java:97)
	... 5 more
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:21:37,429  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:21:37,429  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:21:37,429  INFO SystemAgent - Started Agent Schedulers
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:21:37,444  INFO DockerMonitoringModule - Initializing Executor Service for Docker Metric Collection, pool size:  3
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:21:37,445 ERROR CGroupFileSystemRootProvider - Could not find CGroup files in following path(s) : [/sys/fs/cgroup, /cgroup]
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:21:37,446  INFO DockerMonitor - Not starting docker monitoring extension because it is disabled.
[ExtensionStarter-CrashGuard] 06 Aug 2018 09:21:37,465  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-CrashGuard] 06 Aug 2018 09:21:37,465  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-CrashGuard] 06 Aug 2018 09:21:37,465  INFO SystemAgent - Started Agent Schedulers
[ConfigExecutor-0] 06 Aug 2018 09:21:37,515  INFO CrashGuardRunner - Not starting crash guard extension because it is disabled.To enable, please update the configuration enabled in CrashGuardConfig.yml.
[Thread-2] 06 Aug 2018 09:30:37,183  INFO SystemAgent - Stopping Machine Agent....
[Thread-1] 06 Aug 2018 09:30:37,184  INFO SecondStageSystem - Stopping main system with features Features(features=[dmm, basic], reason=Features.Reason(message=, code=)).
[Thread-2] 06 Aug 2018 09:30:37,186  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-2] 06 Aug 2018 09:30:37,186  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-2] 06 Aug 2018 09:30:37,186  INFO SystemAgent - Shutting down agent monitor manager
[Thread-2] 06 Aug 2018 09:30:37,187  INFO ManagedMonitorDelegate - Scheduled Task [SigarHardwareMonitor] Stopped
[Thread-2] 06 Aug 2018 09:30:37,187  INFO ManagedMonitorDelegate - shutdown metric generation service.
[Thread-2] 06 Aug 2018 09:30:37,187  INFO SystemAgent - Stopped agent monitor manager
[Thread-2] 06 Aug 2018 09:30:37,188  INFO SystemAgent - Shutting down scheduler
[Thread-2] 06 Aug 2018 09:30:37,188  INFO SystemAgent - Stopped scheduler
[Thread-2] 06 Aug 2018 09:30:37,188  INFO SystemAgent - Shutting down monitor scheduler
[Thread-2] 06 Aug 2018 09:30:37,188  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-AgentServer] 06 Aug 2018 09:30:37,189  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-AgentServer] 06 Aug 2018 09:30:37,189  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-AgentServer] 06 Aug 2018 09:30:37,189  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-AgentServer] 06 Aug 2018 09:30:37,189  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:30:37,189  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:30:37,190  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:30:37,190  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:30:37,190  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:30:37,190  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:30:37,190  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:30:37,190  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:30:37,190  INFO SystemAgent - Machine Agent Stopped!
[Thread-1] 06 Aug 2018 09:30:37,190  INFO ManagedScheduledThreadPool - Shutting down extensions thread pool
[Thread-1] 06 Aug 2018 09:30:37,191  INFO SystemAgent - Stopping Machine Agent....
[Thread-1] 06 Aug 2018 09:30:37,191  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-1] 06 Aug 2018 09:30:37,191  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-1] 06 Aug 2018 09:30:37,191  INFO SystemAgent - Machine Agent Stopped!
[main] 06 Aug 2018 09:32:29,054  INFO FlexibleX509TrustManager - Using default keystore for SSL certificate validation.
[system-thread-0] 06 Aug 2018 09:32:29,718  INFO SecondStageSystem - Starting main system with features Features(features=[dmm, basic], reason=Features.Reason(message=, code=))
[system-thread-0] 06 Aug 2018 09:32:29,877  INFO SystemAgent - ####################################################################################
[system-thread-0] 06 Aug 2018 09:32:29,877  INFO SystemAgent - Agent Install Directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351]
[system-thread-0] 06 Aug 2018 09:32:29,877  INFO SystemAgent - Using Agent Version [Machine Agent v4.5.1.1351 GA Build Date 2018-07-19 08:18:49]
[system-thread-0] 06 Aug 2018 09:32:29,878  INFO SystemAgent - JVM Runtime: 
	java.home=/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home/jre
	java.vm.vendor=Oracle Corporation
	java.vm.name=Java HotSpot(TM) 64-Bit Server VM
	java.runtime.version=1.8.0_77-b03
	java.io.tmpdir=/var/folders/8q/rgr01f1x02n92jkbj189gqg92z1z00/T/
	user.language=en
	user.country=US
	user.variant=
	Default locale=en_US
[system-thread-0] 06 Aug 2018 09:32:29,878  INFO SystemAgent - OS Runtime: 
	os.name=Mac OS X
	os.arch=x86_64
	os.version=10.13.2
	user.name=jun.ouyang
	user.home=/Users/jun.ouyang
	user.dir=/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351
[system-thread-0] 06 Aug 2018 09:32:29,878  INFO SystemAgent - JVM Args : 
[system-thread-0] 06 Aug 2018 09:32:29,879  INFO SystemAgent - JVM Runtime Name: 98309@jouyang-osx
[system-thread-0] 06 Aug 2018 09:32:29,879  INFO SystemAgent - JVM PID: 98309
[system-thread-0] 06 Aug 2018 09:32:29,879  INFO SystemAgent - Machine Agent is resolving bootstrap info....
[system-thread-0] 06 Aug 2018 09:32:30,033  INFO SystemAgent - Orchestration is disabled - disabling virtualization resolvers by default.
[system-thread-0] 06 Aug 2018 09:32:30,038  INFO SystemAgent - Full Agent Registration Info Resolver found system property [appdynamics.agent.create.agent.info.if.missing] for appdynamics.agent.create.agent.info.if.missing [false]
[system-thread-0] 06 Aug 2018 09:32:30,046  INFO SystemAgent - Default Host Identifier Resolver using host name for unique host identifier [jouyang-osx]
[system-thread-0] 06 Aug 2018 09:32:30,049  INFO SystemAgent - Default IP Address Resolver found IP addresses [[fe80:0:0:0:2bb9:2114:3c30:4ef0%utun0, fe80:0:0:0:6010:7fff:fe01:a265%awdl0, 2600:1700:5ae0:1eb0:3166:f25e:f320:b523, 2600:1700:5ae0:1eb0:e055:205f:72ff:e63a, 2600:1700:5ae0:1eb0:1837:4382:ad51:9609, fe80:0:0:0:416:ac88:97a0:b2d2%en0, 192.168.1.66, fe80:0:0:0:0:0:0:1%lo0]]
[system-thread-0] 06 Aug 2018 09:32:30,052  INFO SystemAgent - Full Agent Registration Info Resolver using selfService [false]
[system-thread-0] 06 Aug 2018 09:32:30,052  INFO SystemAgent - Full Agent Registration Info Resolver using application name [null]
[system-thread-0] 06 Aug 2018 09:32:30,052  INFO SystemAgent - Full Agent Registration Info Resolver using tier name [null]
[system-thread-0] 06 Aug 2018 09:32:30,052  INFO SystemAgent - Full Agent Registration Info Resolver using node name [null]
[system-thread-0] 06 Aug 2018 09:32:30,056  INFO SystemAgent - XML Controller Info Resolver found controller host [localhost]
[system-thread-0] 06 Aug 2018 09:32:30,056  INFO SystemAgent - XML Controller Info Resolver found controller port [8080]
[system-thread-0] 06 Aug 2018 09:32:30,060  INFO SystemAgent - XML Agent Account Info Resolver using account name [Customer1]
[system-thread-0] 06 Aug 2018 09:32:30,060  INFO SystemAgent - XML Agent Account Info Resolver using account access key [****]
[system-thread-0] 06 Aug 2018 09:32:30,061  INFO SystemAgent - Keystore file /Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/conf/cacerts.jks was not found
[system-thread-0] 06 Aug 2018 09:32:30,072  INFO SystemAgent - Machine Agent resolved bootstrap info!
[system-thread-0] 06 Aug 2018 09:32:30,072  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[system-thread-0] 06 Aug 2018 09:32:30,080  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[system-thread-0] 06 Aug 2018 09:32:30,083  INFO SystemAgent - Started Agent Schedulers
[ConfigExecutor-0] 06 Aug 2018 09:32:30,084  INFO DefaultLegacyAgentRegistrationStateManager - Registered machine with machine ID [Optional.of(4)]
[ConfigExecutor-0] 06 Aug 2018 09:32:30,085  INFO DefaultLegacyAgentRegistrationStateManager - Scheduling System-Agent start...
[system-thread-0] 06 Aug 2018 09:32:30,087  INFO SimAgentRepetitiveLoggingModule - The turnover time for the SIM agent repetitive logger is 5 minutes
[system-thread-0] 06 Aug 2018 09:32:30,087  INFO SimAgentRepetitiveLoggingModule - The cache size for the SIM agent repetitive logger is 1000
[system-thread-0] 06 Aug 2018 09:32:30,237  INFO DefaultLegacyAgentRegistrationStateManager - Starting machine agent...
[system-thread-0] 06 Aug 2018 09:32:30,237  INFO SystemAgent - Starting Machine Agent....
[system-thread-0] 06 Aug 2018 09:32:30,238  INFO ControllerTimeSkewHandler - Skew Handler is : [enabled].
[system-thread-0] 06 Aug 2018 09:32:30,307  INFO ManagedMonitorDelegate - Started Agent Metric Generation Service
[system-thread-0] 06 Aug 2018 09:32:30,314  INFO ManagedMonitorDelegate - Event Service is : [enabled].
[system-thread-0] 06 Aug 2018 09:32:30,333  INFO ManagedMonitorDelegate - Metric Service is : [enabled].
[system-thread-0] 06 Aug 2018 09:32:30,347  INFO ManagedMonitorDelegate - Started Agent Env Properties Service
[system-thread-0] 06 Aug 2018 09:32:30,348  INFO ManagedMonitorDelegate - Scheduled Continuous Task Monitor with frequency [30000]ms
[system-thread-0] 06 Aug 2018 09:32:30,351  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/analytics-agent/monitor.xml
[system-thread-0] 06 Aug 2018 09:32:30,365  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 09:32:30,370  INFO NodeMonitorManager - Initializing managed monitor [analytics-agent]
[system-thread-0] 06 Aug 2018 09:32:30,370  INFO ManagedMonitorDelegate - Not initializing managed monitor [AppDynamics Analytics Agent] - Disabled in configuration file.
[system-thread-0] 06 Aug 2018 09:32:30,375  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/HardwareMonitor/monitor.xml
[system-thread-0] 06 Aug 2018 09:32:30,377  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 09:32:30,379  INFO NodeMonitorManager - Initializing managed monitor [HardwareMonitor]
[system-thread-0] 06 Aug 2018 09:32:30,379  INFO ManagedMonitorDelegate - Not initializing managed monitor [HardwareMonitor] - Disabled in configuration file.
[system-thread-0] 06 Aug 2018 09:32:30,379  INFO MonitorConfigReader - Reading monitor config file:/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/JavaHardwareMonitor/monitor.xml
[system-thread-0] 06 Aug 2018 09:32:30,381  INFO MonitorConfigReader - os name [mac os x] version [10.13.2-lion]
[system-thread-0] 06 Aug 2018 09:32:30,381  INFO NodeMonitorManager - Initializing managed monitor [JavaHardwareMonitor]
[system-thread-0] 06 Aug 2018 09:32:30,381  INFO ManagedMonitorDelegate - Initializing managed monitor [SigarHardwareMonitor]
[system-thread-0] 06 Aug 2018 09:32:30,382  INFO ManagedMonitorDelegate - Executing managed monitor [SigarHardwareMonitor], task name [null]
[system-thread-0] 06 Aug 2018 09:32:30,382  INFO ManagedMonitorDelegate - Task [null] for monitor [SigarHardwareMonitor] is SCHEDULED
[system-thread-0] 06 Aug 2018 09:32:30,385  INFO JavaTaskCreator - Task classpath not specified,System classpath will be used.
[system-thread-0] 06 Aug 2018 09:32:30,448  WARN SigarConfig - No task file found. Will use default configuration. /Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/JavaHardwareMonitor/task.xml
[system-thread-0] 06 Aug 2018 09:32:30,448  INFO SigarDelegate - Operating system is supported [MacOSX]
[system-thread-0] 06 Aug 2018 09:32:31,002  INFO NodeMonitorManager - Directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors/unmanaged] not found, continuing.
[system-thread-0] 06 Aug 2018 09:32:31,002  INFO AgentMonitorManager - Initialized System Monitor Manager with directory [/Users/jun.ouyang/source/helloWorld/lib/machineagent/4.5.1.1351/monitors]
[system-thread-0] 06 Aug 2018 09:32:31,002  INFO SystemAgent - Set up agent monitor manager
[system-thread-0] 06 Aug 2018 09:32:31,004  INFO SystemAgent - Orchestration is disabled - disabling one-way agent transport. The agent will not be able to execute workflow tasks.
[system-thread-0] 06 Aug 2018 09:32:31,009  INFO SystemAgentConfigManager - Scheduling configuration refresh at an interval of 60 seconds
[system-thread-0] 06 Aug 2018 09:32:31,009  INFO SystemAgentConfigManager - Configuration refresh task interval is 60 seconds
[system-thread-0] 06 Aug 2018 09:32:31,009  INFO SystemAgent - Configuration manager successfully configured
[system-thread-0] 06 Aug 2018 09:32:31,012  INFO RunbookHandler - Runbook Operation Execution is : [enabled].
[system-thread-0] 06 Aug 2018 09:32:31,012  INFO SystemAgent - Started AppDynamics Machine Agent Successfully.
[ExtensionStarter-AgentServer] 06 Aug 2018 09:33:00,195  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-AgentServer] 06 Aug 2018 09:33:00,195  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-AgentServer] 06 Aug 2018 09:33:00,195  INFO SystemAgent - Started Agent Schedulers
[ExtensionStarter-ServerMonitoring] 06 Aug 2018 09:33:00,764  INFO ServersExtensionModule - OS is NON_SUPPORTED
[ExtensionStarter-ServerMonitoring] 06 Aug 2018 09:33:00,764  WARN ServersExtensionModule - OS Mac OS X is not supported.
[null-config-threadpool-0] 06 Aug 2018 09:33:00,819  WARN ExtensionManager - Failed to start extension ServerMonitoring.
java.util.concurrent.ExecutionException: com.google.inject.CreationException: Unable to create injector, see the following errors:

1) No implementation for com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 2 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

2) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath()
    for parameter 0 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

3) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4) Could not find a suitable constructor in java.lang.Class. Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.
  at java.lang.Class.class(Class.java:119)
  while locating java.lang.Class<? extends com.appdynamics.sim.agent.extensions.servers.model.RawCollector<?>>
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4 errors
	at java.util.concurrent.FutureTask.report(FutureTask.java:122)
	at java.util.concurrent.FutureTask.get(FutureTask.java:206)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.startExtension(DefaultExtensionContext.java:105)
	at com.appdynamics.voltron.extensions.ExtensionManager.addNewExtensions(ExtensionManager.java:137)
	at com.appdynamics.voltron.extensions.ExtensionManager.internalApply(ExtensionManager.java:89)
	at com.appdynamics.voltron.extensions.ExtensionManager.access$000(ExtensionManager.java:35)
	at com.appdynamics.voltron.extensions.ExtensionManager$1.run(ExtensionManager.java:74)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
Caused by: com.google.inject.CreationException: Unable to create injector, see the following errors:

1) No implementation for com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating com.google.common.base.Supplier<java.util.List<java.lang.String>> annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 2 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

2) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.RawSimCollectorScriptPath()
    for parameter 0 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

3) No implementation for java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand() was bound.
  while locating java.lang.String annotated with @com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessCommand()
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.SimCollectorProcessBuilderFromContentProvider.<init>(SimCollectorProcessBuilderFromContentProvider.java:41)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:32) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4) Could not find a suitable constructor in java.lang.Class. Classes must have either one (and only one) constructor annotated with @Inject or a zero-argument constructor that is not private.
  at java.lang.Class.class(Class.java:119)
  while locating java.lang.Class<? extends com.appdynamics.sim.agent.extensions.servers.model.RawCollector<?>>
    for parameter 1 at com.appdynamics.sim.agent.extensions.servers.collector.LocalSimCollectorScriptContentProvider.<init>(LocalSimCollectorScriptContentProvider.java:38)
  at com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule.configure(ContentRawCollectorModule.java:27) (via modules: com.appdynamics.sim.agent.extensions.servers.ServersExtensionModule -> com.appdynamics.sim.agent.extensions.servers.collector.ContentRawCollectorModule)

4 errors
	at com.google.inject.internal.Errors.throwCreationExceptionIfErrorsExist(Errors.java:466)
	at com.google.inject.internal.InternalInjectorCreator.initializeStatically(InternalInjectorCreator.java:155)
	at com.google.inject.internal.InternalInjectorCreator.build(InternalInjectorCreator.java:107)
	at com.google.inject.Guice.createInjector(Guice.java:96)
	at com.google.inject.Guice.createInjector(Guice.java:73)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.startExtensionInternal(DefaultExtensionContext.java:185)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext.access$200(DefaultExtensionContext.java:31)
	at com.appdynamics.voltron.extensions.DefaultExtensionContext$1.run(DefaultExtensionContext.java:97)
	... 5 more
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:33:00,922  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:33:00,922  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:33:00,922  INFO SystemAgent - Started Agent Schedulers
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:33:00,934  INFO DockerMonitoringModule - Initializing Executor Service for Docker Metric Collection, pool size:  3
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:33:00,936 ERROR CGroupFileSystemRootProvider - Could not find CGroup files in following path(s) : [/sys/fs/cgroup, /cgroup]
[ExtensionStarter-DockerMonitoring] 06 Aug 2018 09:33:00,938  INFO DockerMonitor - Not starting docker monitoring extension because it is disabled.
[ExtensionStarter-CrashGuard] 06 Aug 2018 09:33:00,959  INFO SystemAgent - Creating machine agent scheduler, pool size: 2
[ExtensionStarter-CrashGuard] 06 Aug 2018 09:33:00,960  INFO SystemAgent - Creating machine agent monitor scheduler, pool size: 4
[ExtensionStarter-CrashGuard] 06 Aug 2018 09:33:00,960  INFO SystemAgent - Started Agent Schedulers
[ConfigExecutor-0] 06 Aug 2018 09:33:00,967  INFO CrashGuardRunner - Not starting crash guard extension because it is disabled.To enable, please update the configuration enabled in CrashGuardConfig.yml.
[Thread-2] 06 Aug 2018 09:34:40,072  INFO SystemAgent - Stopping Machine Agent....
[Thread-2] 06 Aug 2018 09:34:40,074  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-1] 06 Aug 2018 09:34:40,073  INFO SecondStageSystem - Stopping main system with features Features(features=[dmm, basic], reason=Features.Reason(message=, code=)).
[Thread-2] 06 Aug 2018 09:34:40,074  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-2] 06 Aug 2018 09:34:40,075  INFO SystemAgent - Shutting down agent monitor manager
[Thread-2] 06 Aug 2018 09:34:40,075  INFO ManagedMonitorDelegate - Scheduled Task [SigarHardwareMonitor] Stopped
[Thread-2] 06 Aug 2018 09:34:40,075  INFO ManagedMonitorDelegate - shutdown metric generation service.
[Thread-2] 06 Aug 2018 09:34:40,075  INFO SystemAgent - Stopped agent monitor manager
[Thread-2] 06 Aug 2018 09:34:40,075  INFO SystemAgent - Shutting down scheduler
[Thread-2] 06 Aug 2018 09:34:40,075  INFO SystemAgent - Stopped scheduler
[Thread-2] 06 Aug 2018 09:34:40,075  INFO SystemAgent - Shutting down monitor scheduler
[Thread-2] 06 Aug 2018 09:34:40,076  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-AgentServer] 06 Aug 2018 09:34:40,076  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-AgentServer] 06 Aug 2018 09:34:40,076  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-AgentServer] 06 Aug 2018 09:34:40,076  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-AgentServer] 06 Aug 2018 09:34:40,076  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:34:40,076  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:34:40,076  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:34:40,076  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-DockerMonitoring] 06 Aug 2018 09:34:40,076  INFO SystemAgent - Machine Agent Stopped!
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:34:40,076  INFO SystemAgent - Stopping Machine Agent....
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:34:40,077  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:34:40,077  INFO SystemAgent - Shutting down agent scheduler manager
[ExtensionStopper-CrashGuard] 06 Aug 2018 09:34:40,077  INFO SystemAgent - Machine Agent Stopped!
[Thread-1] 06 Aug 2018 09:34:40,077  INFO ManagedScheduledThreadPool - Shutting down extensions thread pool
[Thread-1] 06 Aug 2018 09:34:40,077  INFO SystemAgent - Stopping Machine Agent....
[Thread-1] 06 Aug 2018 09:34:40,077  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-1] 06 Aug 2018 09:34:40,077  INFO SystemAgent - Shutting down agent scheduler manager
[Thread-1] 06 Aug 2018 09:34:40,077  INFO SystemAgent - Machine Agent Stopped!
