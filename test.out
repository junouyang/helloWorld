1. Node id, Node name, Agent version, Agent type, Application id, Account id, Tier name
select n.id node_id,n.name node_name, agent_version, a.type agent_type, ac.application_id, ap.account_id, ac.name tier_name from application_component_node n left join application_component_node_agent_mapping m on n.id=m.application_component_node_id join agent a on a.id=m.agent_id left join application_component ac on ac.id=n.application_component_id left join application ap on ap.id=ac.application_id;

2. CPU Usage %
select node_id, min(min_val) process_cpu_percent_min, max(max_val) process_cpu_percent_max, round(avg(sum_val / count_val),2) process_cpu_percent_avg from metricdata_ten_min md where metric_id in (select id from metric where name like 'JVM|Process CPU Usage %') and ts_min > floor((unix_timestamp() / 60) - 4*60) group by node_id order by node_id;

3. Heap usage %
select node_id, min(min_val) heap_percentage_min, max(max_val) heap_percentage_max, round(avg(sum_val / count_val),2) heap_percentage_avg from metricdata_ten_min md where metric_id in (select id from metric where name like 'JVM|Memory:Heap|Used %') and ts_min > floor((unix_timestamp() / 60) - 4*60) group by node_id order by node_id;

4. Heap available size GB
select node_id, round(min(min_val)/1024, 2) max_heap_available_gb_min, round(max(max_val)/1024, 2) max_heap_available_gb_max, round(avg(sum_val / count_val)/1024, 2) max_heap_available_gb_avg from metricdata_ten_min md where metric_id in (select id from metric where name = 'JVM|Memory:Heap|Max Available (MB)') and ts_min > floor((unix_timestamp() / 60) - 4*60) group by node_id order by node_id;

5. Host memory GB
select node_id, round(min(min_val)/1024, 2) host_memory_gb from metricdata_ten_min md where metric_id in (select id from metric where name = 'Hardware Resources|Memory|Total (MB)') and ts_min > floor((unix_timestamp() / 60) - 4*60) group by node_id order by node_id) memory on n.id=memory.node_id;

6. Active Bts
select node_id, count(distinct metric_id) active_bts from metricdata_ten_min md where md.metric_id in (select id from metric where name like "BTM|BTs|BT:%|Calls per Minute") and ts_min > floor((unix_timestamp() / 60) - 4*60) and md.cur_val > 0 group by node_id order by node_id;

7. Active Seps
select node_id, count(distinct metric_id) active_seps from metricdata_ten_min md where md.metric_id in (select id from metric where name like "BTM|Application Diagnostic Data|SEP:%" and name like "%|Calls per Minute") and ts_min > floor((unix_timestamp() / 60) - 4*60) and md.cur_val > 0 group by node_id order by node_id;

8. Active Bt Segments
select node_id ,count(distinct metric_id) active_bt_segments from metricdata_ten_min md where md.metric_id in (select name from metric where name like 'BTM|BTs|BT:%|Component:%|Calls per Minute' and substring_index(name, '|',-2) not like 'To:%') and ts_min > floor((unix_timestamp() / 60) - 4*60) and md.cur_val > 0 group by node_id order by node_id) active_bt_segments on n.id=active_bt_segments.node_id;

9. CPU core count
select acn.id node_id, sm.id machine_id, sum(property_value) cpu_core_count, sm.name host_name, sm.host_id from application_component_node acn left join machine_instance mi on acn.machine_instance_id=mi.id left join sim_machine sm on sm.host_id=mi.internal_name and sm.account_id=mi.account_id left join sim_machine_property smp on sm.id=smp.machine_id where property_key like "%CPU%|Core Count" group by acn.id;

10. Metrics per minute
select node_id, max(c) metrics_per_min_max, min(c) metrics_per_min_min, round(avg(c)) metrics_per_min_avg from (select count(*) c, ts_min, node_id from metricdata_min where ts_min > floor((unix_timestamp() / 60) - 4*60) group by node_id, ts_min) mc group by node_id;

11. Events per minute
select triggered_entity_id node_id, max(c) events_per_min_max, min(c) events_per_min_min, round(avg(c)) events_per_min_avg from (select count(*) c, ts_min, triggered_entity_id from eventdata_min where ts_min > floor((unix_timestamp() / 60) - 4*60) and triggered_entity_type='APPLICATION_COMPONENT_NODE' group by triggered_entity_id, ts_min) ec group by triggered_entity_id;

12. Snapshots per minute
select node_id, max(c) snapshots_per_min_max, min(c) snapshots_per_min_min, round(avg(c)) snapshots_per_min_avg from (select count(distinct guid) c, ts_ms/60000, node_id from requestdata_summary where ts_ms > floor((unix_timestamp() * 1000 ) - 4*3600 * 1000) group by node_id, ts_ms/60000) sc group by node_id;